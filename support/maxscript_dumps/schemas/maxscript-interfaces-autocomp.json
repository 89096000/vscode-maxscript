				{
					"name": "ActionItemOverrideManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "overridesActive",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "timeToStartOverride",
								"desc": "float : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "AnimLayerManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "filterActiveOnly",
								"desc": "bool : Read|Write"
							},
							{
								"name": "justUpToActive",
								"desc": "bool : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "getLayerName",
								"desc": "<TSTR by value>getLayerName <index>listIndex\nlistIndex Validated by Validator function"
							},
							{
								"name": "GetCollapsePerFrame()",
								"desc": "<bool>GetCollapsePerFrame()"
							},
							{
								"name": "GetCollapsePerFrameActiveRange()",
								"desc": "<bool>GetCollapsePerFrameActiveRange()"
							},
							{
								"name": "getLayerLocked",
								"desc": "<bool>getLayerLocked <index>listIndex\nlistIndex Validated by Validator function"
							},
							{
								"name": "getLayerMute",
								"desc": "<bool>getLayerMute <index>listIndex\nlistIndex Validated by Validator function"
							},
							{
								"name": "getLayerOutputMute",
								"desc": "<bool>getLayerOutputMute <index>listIndex\nlistIndex Validated by Validator function"
							},
							{
								"name": "setLayerWeightControl",
								"desc": "<bool>setLayerWeightControl <index>listIndex <control>control\nlistIndex Validated by Validator function"
							},
							{
								"name": "canEnableLayer",
								"desc": "<boolean>canEnableLayer <maxObject>anim <maxObject>client <index>subNum"
							},
							{
								"name": "enableLayer",
								"desc": "<boolean>enableLayer <maxObject>anim <maxObject>client <index>subNum"
							},
							{
								"name": "getLayerWeightControl",
								"desc": "<control>getLayerWeightControl <index>listIndex\nlistIndex Validated by Validator function"
							},
							{
								"name": "getLayerWeight",
								"desc": "<float>getLayerWeight <index>listIndex <time>atTime\nlistIndex Validated by Validator function"
							},
							{
								"name": "getActiveLayersNodes",
								"desc": "<index array>getActiveLayersNodes <&node array>nodes\nnodes is In and Out parameter"
							},
							{
								"name": "getNodesLayers",
								"desc": "<index array>getNodesLayers <&node array>nodes\nnodes is In and Out parameter"
							},
							{
								"name": "getLayerCount()",
								"desc": "<index>getLayerCount()"
							},
							{
								"name": "enableLayers",
								"desc": "<integer>enableLayers <&node array>nodes pos:<boolean> rot:<boolean> scale:<boolean> ik:<boolean> object:<boolean> customAtt:<boolean> mod:<boolean> mat:<boolean> other:<boolean>\nnodes is In and Out parameter\npos default value: true\nrot default value: true\nscale default value: true\nik default value: false\nobject default value: false\ncustomAtt default value: false\nmod default value: false\nmat default value: false\nother default value: false"
							},
							{
								"name": "enableLayersDlg",
								"desc": "<integer>enableLayersDlg <&node array>nodes\nnodes is In and Out parameter"
							},
							{
								"name": "SetCollapseControllerType",
								"desc": "<void>SetCollapseControllerType <enum>controllerType\ncontrollerType enums: {#Bezier|#Linear|#Default}"
							},
							{
								"name": "SetCollapsePerFrame",
								"desc": "<void>SetCollapsePerFrame <bool>keyable"
							},
							{
								"name": "SetCollapsePerFrameActiveRange",
								"desc": "<void>SetCollapsePerFrameActiveRange <bool>activeRange"
							},
							{
								"name": "SetCollapseRange",
								"desc": "<void>SetCollapseRange <interval>range"
							},
							{
								"name": "addLayer",
								"desc": "<void>addLayer <&TSTR>name <&node array>nodes <bool>useActiveControllerType\nname is In and Out parameter\nnodes is In and Out parameter"
							},
							{
								"name": "addLayerDlg",
								"desc": "<void>addLayerDlg <&node array>nodes\nnodes is In and Out parameter"
							},
							{
								"name": "animLayerPropertiesDlg()",
								"desc": "<void>animLayerPropertiesDlg()"
							},
							{
								"name": "collapseLayerNodes",
								"desc": "<void>collapseLayerNodes <index>listIndex <&node array>nodes\nlistIndex Validated by Validator function\nnodes is In and Out parameter"
							},
							{
								"name": "copyLayerNodes",
								"desc": "<void>copyLayerNodes <index>listIndex <&node array>nodes\nlistIndex Validated by Validator function\nnodes is In and Out parameter"
							},
							{
								"name": "deleteLayer",
								"desc": "<void>deleteLayer <index>listIndex\nlistIndex Validated by Validator function"
							},
							{
								"name": "deleteLayerNodes",
								"desc": "<void>deleteLayerNodes <index>listIndex <&node array>nodes\nlistIndex Validated by Validator function\nnodes is In and Out parameter"
							},
							{
								"name": "disableLayerNodes",
								"desc": "<void>disableLayerNodes <&node array>nodes\nnodes is In and Out parameter"
							},
							{
								"name": "getNodesActiveLayer",
								"desc": "<void>getNodesActiveLayer <&node array>nodes\nnodes is In and Out parameter"
							},
							{
								"name": "pasteLayerNodes",
								"desc": "<void>pasteLayerNodes <index>listIndex <&node array>nodes\nlistIndex Validated by Validator function\nnodes is In and Out parameter"
							},
							{
								"name": "refreshAnimLayerPropertiesDlg()",
								"desc": "<void>refreshAnimLayerPropertiesDlg()"
							},
							{
								"name": "setLayerActive",
								"desc": "<void>setLayerActive <index>listIndex\nlistIndex Validated by Validator function"
							},
							{
								"name": "setLayerActiveNodes",
								"desc": "<void>setLayerActiveNodes <index>listIndex <&node array>nodes\nlistIndex Validated by Validator function\nnodes is In and Out parameter"
							},
							{
								"name": "setLayerLocked",
								"desc": "<void>setLayerLocked <index>listIndex <bool>locked\nlistIndex Validated by Validator function"
							},
							{
								"name": "setLayerMute",
								"desc": "<void>setLayerMute <index>listIndex <bool>mute\nlistIndex Validated by Validator function"
							},
							{
								"name": "setLayerName",
								"desc": "<void>setLayerName <index>listIndex <TSTR by value>name\nlistIndex Validated by Validator function"
							},
							{
								"name": "setLayerOutputMute",
								"desc": "<void>setLayerOutputMute <index>listIndex <bool>mute\nlistIndex Validated by Validator function"
							},
							{
								"name": "setLayerWeight",
								"desc": "<void>setLayerWeight <index>listIndex <time>atTime <float>weight\nlistIndex Validated by Validator function"
							},
							{
								"name": "showAnimLayersManagerToolbar",
								"desc": "<void>showAnimLayersManagerToolbar <bool>show"
							}
						]
					}
				},
				{
					"name": "assemblyMgr",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "Attach",
								"desc": "<bool>Attach <node array>nodes assembly:<node>\nassembly default value: undefined"
							},
							{
								"name": "CanAssemble",
								"desc": "<bool>CanAssemble <node array>nodes"
							},
							{
								"name": "CanAttach",
								"desc": "<bool>CanAttach <node array>nodes assembly:<node>\nassembly default value: undefined"
							},
							{
								"name": "CanClose",
								"desc": "<bool>CanClose <node array>nodes"
							},
							{
								"name": "CanDetach",
								"desc": "<bool>CanDetach <node array>nodes"
							},
							{
								"name": "CanDisassemble",
								"desc": "<bool>CanDisassemble <node array>nodes"
							},
							{
								"name": "CanExplode",
								"desc": "<bool>CanExplode <node array>nodes"
							},
							{
								"name": "CanOpen",
								"desc": "<bool>CanOpen <node array>nodes"
							},
							{
								"name": "Close",
								"desc": "<bool>Close <node array>nodes select:<bool>\nselect default value: true"
							},
							{
								"name": "Detach",
								"desc": "<bool>Detach <node array>nodes"
							},
							{
								"name": "Disassemble",
								"desc": "<bool>Disassemble <node array>nodes"
							},
							{
								"name": "Explode",
								"desc": "<bool>Explode <node array>nodes"
							},
							{
								"name": "Open",
								"desc": "<bool>Open <node array>nodes clearSelection:<bool>\nclearSelection default value: true"
							},
							{
								"name": "Assemble",
								"desc": "<node>Assemble <node array>nodes name:<string> classDesc:<class> select:<bool>\nname default value: undefined\nclassDesc default value: undefined\nselect default value: true"
							},
							{
								"name": "IsAssembly",
								"desc": "<node>IsAssembly <node array>nodes"
							}
						]
					}
				},
				{
					"name": "ATSOps",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "AutoLogin",
								"desc": "bool : Read|Write"
							},
							{
								"name": "CheckNetworkPaths",
								"desc": "bool : Read|Write"
							},
							{
								"name": "Disabled",
								"desc": "bool : Read|Write"
							},
							{
								"name": "DisplayExcluded",
								"desc": "bool : Read|Write"
							},
							{
								"name": "ExcludeOutputFiles",
								"desc": "bool : Read|Write"
							},
							{
								"name": "Silent",
								"desc": "bool : Read|Write"
							},
							{
								"name": "TableView",
								"desc": "bool : Read|Write"
							},
							{
								"name": "TreeView",
								"desc": "bool : Read|Write"
							},
							{
								"name": "Visible",
								"desc": "bool : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "AddAttachmentToNotificationFileListEntry",
								"desc": "<bool>AddAttachmentToNotificationFileListEntry <index>FileListIndex <filename>Filename\nAddAttachmentToNotificationFileListEntry - no automatic redraw after invoked"
							},
							{
								"name": "AddFileToNotificationFileList",
								"desc": "<bool>AddFileToNotificationFileList <filename>Filename\nAddFileToNotificationFileList - no automatic redraw after invoked"
							},
							{
								"name": "AddFiles",
								"desc": "<bool>AddFiles <index>ProviderIndex <&filename array>FileList <&TSTR>Comment IsHidden:<&bool array>\nAddFiles - no automatic redraw after invoked\nFileList is In parameter\nComment is In and Out parameter\nIsHidden default value: #()\nIsHidden is In parameter"
							},
							{
								"name": "CanGetFromProvider",
								"desc": "<bool>CanGetFromProvider <index>ProviderIndex\nCanGetFromProvider - no automatic redraw after invoked"
							},
							{
								"name": "Checkin",
								"desc": "<bool>Checkin <index>ProviderIndex <&filename array>FileList <&TSTR>Comment\nCheckin - no automatic redraw after invoked\nFileList is In parameter\nComment is In and Out parameter"
							},
							{
								"name": "Checkout",
								"desc": "<bool>Checkout <index>ProviderIndex <&filename array>FileList <&TSTR>Comment\nCheckout - no automatic redraw after invoked\nFileList is In parameter\nComment is In and Out parameter"
							},
							{
								"name": "GetLatest",
								"desc": "<bool>GetLatest <index>ProviderIndex <&filename array>FileList\nGetLatest - no automatic redraw after invoked\nFileList is In parameter"
							},
							{
								"name": "GetVersion",
								"desc": "<bool>GetVersion <index>ProviderIndex <filename>Filename <integer>VersionNumber\nGetVersion - no automatic redraw after invoked"
							},
							{
								"name": "IsFileExcluded",
								"desc": "<bool>IsFileExcluded <index>ProviderIndex <filename>Filename\nIsFileExcluded - no automatic redraw after invoked"
							},
							{
								"name": "IsFileShareLocked",
								"desc": "<bool>IsFileShareLocked <index>ProviderIndex <filename>Filename\nIsFileShareLocked - no automatic redraw after invoked"
							},
							{
								"name": "IsInitialized",
								"desc": "<bool>IsInitialized <index>ProviderIndex\nIsInitialized - no automatic redraw after invoked"
							},
							{
								"name": "IsInputFile",
								"desc": "<bool>IsInputFile <filename>Filename\nIsInputFile - no automatic redraw after invoked"
							},
							{
								"name": "IsProjectOpen",
								"desc": "<bool>IsProjectOpen <index>ProviderIndex\nIsProjectOpen - no automatic redraw after invoked"
							},
							{
								"name": "RegisterNotification",
								"desc": "<bool>RegisterNotification <value>Callback <integer>ID\nRegisterNotification - no automatic redraw after invoked"
							},
							{
								"name": "RemoveFileFromNotificationFileList",
								"desc": "<bool>RemoveFileFromNotificationFileList <index>FileListIndex\nRemoveFileFromNotificationFileList - no automatic redraw after invoked"
							},
							{
								"name": "ResolveSelectionRelativeToProjectFolder()",
								"desc": "<bool>ResolveSelectionRelativeToProjectFolder()"
							},
							{
								"name": "ResolveSelectionToUNC()",
								"desc": "<bool>ResolveSelectionToUNC()"
							},
							{
								"name": "RetargetAssets",
								"desc": "<bool>RetargetAssets <&maxObject>AssetOwner <filename>OldPath <filename>NewPath CreateOutputFolder:<bool>\nAssetOwner is In parameter\nCreateOutputFolder default value: false"
							},
							{
								"name": "RetargetCommonRoot",
								"desc": "<bool>RetargetCommonRoot <filename>NewPath CreateOutputFolder:<bool>\nCreateOutputFolder default value: false"
							},
							{
								"name": "RetargetCommonRootOfSelection",
								"desc": "<bool>RetargetCommonRootOfSelection <filename>NewPath CreateOutputFolder:<bool>\nCreateOutputFolder default value: false"
							},
							{
								"name": "RetargetSelection",
								"desc": "<bool>RetargetSelection <filename>NewPath CreateOutputFolder:<bool>\nCreateOutputFolder default value: false"
							},
							{
								"name": "SetPath",
								"desc": "<bool>SetPath <filename>NewPath CreateOutputFolder:<bool>\nCreateOutputFolder default value: false"
							},
							{
								"name": "SetPathOnSelection",
								"desc": "<bool>SetPathOnSelection <filename>NewPath CreateOutputFolder:<bool>\nCreateOutputFolder default value: false"
							},
							{
								"name": "TestFileStatus",
								"desc": "<bool>TestFileStatus <index>ProviderIndex <filename>Filename <enum>Status\nTestFileStatus - no automatic redraw after invoked\nStatus enums: {#Unknown|#NotControlled|#Controlled|#CheckedOut|#CheckedOutOther|#OutOfDate|#Deleted|#Missing|#Modified|#Hidden|#ShareLock|#CanCheckin|#CanCheckout|#CanUndoCheckout|#CanGetLatest|#CanAddFile|#CanShowHistory|#CanShowProperties}"
							},
							{
								"name": "TestFileSystemStatus",
								"desc": "<bool>TestFileSystemStatus <filename>Filename <enum>Status\nTestFileSystemStatus - no automatic redraw after invoked\nStatus enums: {#Unknown|#Ok|#Missing|#Found|#NetworkPath}"
							},
							{
								"name": "UndoCheckout",
								"desc": "<bool>UndoCheckout <index>ProviderIndex <&filename array>FileList\nUndoCheckout - no automatic redraw after invoked\nFileList is In parameter"
							},
							{
								"name": "GetWorkingFolder",
								"desc": "<filename>GetWorkingFolder <index>ProviderIndex\nGetWorkingFolder - no automatic redraw after invoked"
							},
							{
								"name": "GetDependencyFileList",
								"desc": "<integer>GetDependencyFileList <maxObject>Dependent <&filename array>FileList <bool>includeRefHierarchy\nGetDependencyFileList - no automatic redraw after invoked\nFileList is Out parameter"
							},
							{
								"name": "GetDependentFiles",
								"desc": "<integer>GetDependentFiles <filename>Filename <bool>Recurse <&filename array>FileList IncludeOutputFiles:<bool>\nGetDependentFiles - no automatic redraw after invoked\nFileList is Out parameter\nIncludeOutputFiles default value: true"
							},
							{
								"name": "GetFiles",
								"desc": "<integer>GetFiles <&filename array>FileList\nGetFiles - no automatic redraw after invoked\nFileList is Out parameter"
							},
							{
								"name": "GetFilesByFileSystemStatus",
								"desc": "<integer>GetFilesByFileSystemStatus <enum>Status <&filename array>FileList\nGetFilesByFileSystemStatus - no automatic redraw after invoked\nStatus enums: {#Unknown|#Ok|#Missing|#Found|#NetworkPath}\nFileList is Out parameter"
							},
							{
								"name": "GetMaxVersion",
								"desc": "<integer>GetMaxVersion <index>ProviderIndex <filename>Filename\nGetMaxVersion - no automatic redraw after invoked"
							},
							{
								"name": "GetMinVersion",
								"desc": "<integer>GetMinVersion <index>ProviderIndex <filename>Filename\nGetMinVersion - no automatic redraw after invoked"
							},
							{
								"name": "GetNotificationFileList",
								"desc": "<integer>GetNotificationFileList <&filename array>FileList\nGetNotificationFileList - no automatic redraw after invoked\nFileList is Out parameter"
							},
							{
								"name": "GetResolvedPaths",
								"desc": "<integer>GetResolvedPaths <&filename array>FileList <&filename array>ResolvedFileList\nGetResolvedPaths - no automatic redraw after invoked\nFileList is In parameter\nResolvedFileList is Out parameter"
							},
							{
								"name": "GetSelectedFiles",
								"desc": "<integer>GetSelectedFiles <&filename array>FileList\nGetSelectedFiles - no automatic redraw after invoked\nFileList is Out parameter"
							},
							{
								"name": "GetProviderName",
								"desc": "<string>GetProviderName <index>ProviderIndex\nGetProviderName - no automatic redraw after invoked"
							},
							{
								"name": "GetFileStatus",
								"desc": "<value>GetFileStatus <index>ProviderIndex <filename>Filename\nGetFileStatus - no automatic redraw after invoked"
							},
							{
								"name": "GetFileSystemStatus",
								"desc": "<value>GetFileSystemStatus <filename>Filename\nGetFileSystemStatus - no automatic redraw after invoked"
							},
							{
								"name": "AppendStatusLog",
								"desc": "<void>AppendStatusLog <string>Status\nAppendStatusLog - no automatic redraw after invoked"
							},
							{
								"name": "CheckForCheckedOutFiles",
								"desc": "<void>CheckForCheckedOutFiles <index>ProviderIndex\nCheckForCheckedOutFiles - no automatic redraw after invoked"
							},
							{
								"name": "CheckForDependentFiles",
								"desc": "<void>CheckForDependentFiles <index>ProviderIndex <filename>Filename\nCheckForDependentFiles - no automatic redraw after invoked"
							},
							{
								"name": "CheckForOutDatedFiles",
								"desc": "<void>CheckForOutDatedFiles <index>ProviderIndex\nCheckForOutDatedFiles - no automatic redraw after invoked"
							},
							{
								"name": "CheckForSceneFileCheckOut",
								"desc": "<void>CheckForSceneFileCheckOut <index>ProviderIndex\nCheckForSceneFileCheckOut - no automatic redraw after invoked"
							},
							{
								"name": "CheckForUnControlledFiles",
								"desc": "<void>CheckForUnControlledFiles <index>ProviderIndex\nCheckForUnControlledFiles - no automatic redraw after invoked"
							},
							{
								"name": "CloseProject",
								"desc": "<void>CloseProject <index>ProviderIndex\nCloseProject - no automatic redraw after invoked"
							},
							{
								"name": "GetFilesByStatus",
								"desc": "<void>GetFilesByStatus <index>ProviderIndex <enum>Status <&filename array>FileList\nGetFilesByStatus - no automatic redraw after invoked\nStatus enums: {#Unknown|#NotControlled|#Controlled|#CheckedOut|#CheckedOutOther|#OutOfDate|#Deleted|#Missing|#Modified|#Hidden|#ShareLock|#CanCheckin|#CanCheckout|#CanUndoCheckout|#CanGetLatest|#CanAddFile|#CanShowHistory|#CanShowProperties}\nFileList is Out parameter"
							},
							{
								"name": "GetFromProvider",
								"desc": "<void>GetFromProvider <index>ProviderIndex <string>FilterName <string>FilterExtensions <bool>AddAllFilesFilter <bool>MultiSelect <bool>Download <&filename array>FileList\nGetFromProvider - no automatic redraw after invoked\nFileList is Out parameter"
							},
							{
								"name": "LaunchOptions",
								"desc": "<void>LaunchOptions <index>ProviderIndex\nLaunchOptions - no automatic redraw after invoked"
							},
							{
								"name": "LaunchProvider",
								"desc": "<void>LaunchProvider <index>ProviderIndex\nLaunchProvider - no automatic redraw after invoked"
							},
							{
								"name": "Login",
								"desc": "<void>Login <index>ProviderIndex\nLogin - no automatic redraw after invoked"
							},
							{
								"name": "Logout",
								"desc": "<void>Logout <index>ProviderIndex\nLogout - no automatic redraw after invoked"
							},
							{
								"name": "OpenProject",
								"desc": "<void>OpenProject <index>ProviderIndex <filename>ProjectPath\nOpenProject - no automatic redraw after invoked"
							},
							{
								"name": "Properties",
								"desc": "<void>Properties <index>ProviderIndex <&filename array>FileList\nProperties - no automatic redraw after invoked\nFileList is In parameter"
							},
							{
								"name": "SelectFiles",
								"desc": "<void>SelectFiles <&filename array>FileList\nSelectFiles - no automatic redraw after invoked\nFileList is In parameter"
							},
							{
								"name": "SetActiveProvider",
								"desc": "<void>SetActiveProvider <index>ProviderIndex\nSetActiveProvider - no automatic redraw after invoked"
							},
							{
								"name": "SetWorkingComment",
								"desc": "<void>SetWorkingComment <string>Comment\nSetWorkingComment - no automatic redraw after invoked"
							},
							{
								"name": "SetWorkingFolder",
								"desc": "<void>SetWorkingFolder <index>ProviderIndex <filename>Folder\nSetWorkingFolder - no automatic redraw after invoked"
							},
							{
								"name": "ShowHistory",
								"desc": "<void>ShowHistory <index>ProviderIndex <&filename array>FileList\nShowHistory - no automatic redraw after invoked\nFileList is In parameter"
							},
							{
								"name": "UnRegisterNotification",
								"desc": "<void>UnRegisterNotification <integer>ID\nUnRegisterNotification - no automatic redraw after invoked"
							}
						]
					}
				},
				{
					"name": "Autodesk360",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetLoginUserName()",
								"desc": "<TSTR by value>GetLoginUserName()"
							},
							{
								"name": "InitializeWebServices()",
								"desc": "<bool>InitializeWebServices()"
							},
							{
								"name": "IsLoggedIn()",
								"desc": "<bool>IsLoggedIn()"
							},
							{
								"name": "IsLoginValid()",
								"desc": "<bool>IsLoginValid()"
							},
							{
								"name": "Login()",
								"desc": "<bool>Login()"
							},
							{
								"name": "Logout()",
								"desc": "<bool>Logout()"
							}
						]
					}
				},
				{
					"name": "AutodeskMaterialManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetCategoryCount()",
								"desc": "<integer>GetCategoryCount()"
							},
							{
								"name": "GetDefinitionCount",
								"desc": "<integer>GetDefinitionCount <integer>categoryIndex"
							},
							{
								"name": "CreateAutodeskMaterial",
								"desc": "<material>CreateAutodeskMaterial <string>definitionIdentifier"
							},
							{
								"name": "GetCategoryUiName",
								"desc": "<string>GetCategoryUiName <integer>categoryIndex"
							},
							{
								"name": "GetDefinitionIdentifier",
								"desc": "<string>GetDefinitionIdentifier <integer>categoryIndex <integer>definitionIndex"
							},
							{
								"name": "GetDefinitionThumbnailURL",
								"desc": "<string>GetDefinitionThumbnailURL <integer>categoryIndex <integer>definitionIndex"
							},
							{
								"name": "GetDefinitionUiName",
								"desc": "<string>GetDefinitionUiName <integer>categoryIndex <integer>definitionIndex"
							}
						]
					}
				},
				{
					"name": "AutoTangentMan",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "NewControllersAutoTangentAlgorithm",
								"desc": "enum : Read|Write"
							},
							{
								"name": "NewControllersAutoTangentAlgorithm",
								"desc": "NewControllersAutoTangentAlgorithm enums: {#unsupported|#legacy|#unified}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "SupportsAutoTangent",
								"desc": "<bool>SupportsAutoTangent <maxObject>anim"
							},
							{
								"name": "GetAutoTangentAlgorithm",
								"desc": "<enum>GetAutoTangentAlgorithm <maxObject>anim\nGetAutoTangentAlgorithm enums: {#unsupported|#legacy|#unified"
							}
						]
					}
				},
				{
					"name": "BatchProOptimizer",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "ApplyModifier",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "AutoRename",
								"desc": "bool : Read|Write"
							},
							{
								"name": "CompactFaces",
								"desc": "bool : Read|Write"
							},
							{
								"name": "DestFileNameMode",
								"desc": "integer : Read|Write"
							},
							{
								"name": "DestFileNamePrefix",
								"desc": "string : Read|Write"
							},
							{
								"name": "DestFileNameSuffix",
								"desc": "string : Read|Write"
							},
							{
								"name": "DestFolderMode",
								"desc": "integer : Read|Write"
							},
							{
								"name": "DestFolderName",
								"desc": "string : Read|Write"
							},
							{
								"name": "DestFormatExt",
								"desc": "string : Read|Write"
							},
							{
								"name": "DestFormatMode",
								"desc": "integer : Read|Write"
							},
							{
								"name": "KeepMaterialBoundaries",
								"desc": "bool : Read|Write"
							},
							{
								"name": "KeepNormals",
								"desc": "bool : Read|Write"
							},
							{
								"name": "KeepTexture",
								"desc": "bool : Read|Write"
							},
							{
								"name": "KeepUVBoundaries",
								"desc": "bool : Read|Write"
							},
							{
								"name": "KeepVertexColors",
								"desc": "bool : Read|Write"
							},
							{
								"name": "KeepVertexColorsBoundaries",
								"desc": "bool : Read|Write"
							},
							{
								"name": "LogFilePath",
								"desc": "string : Read|Write"
							},
							{
								"name": "MergeFaces",
								"desc": "bool : Read|Write"
							},
							{
								"name": "MergeFacesThreshold",
								"desc": "float : Read|Write"
							},
							{
								"name": "MergePoints",
								"desc": "bool : Read|Write"
							},
							{
								"name": "MergePointsThreshold",
								"desc": "float : Read|Write"
							},
							{
								"name": "NormalMode",
								"desc": "integer : Read|Write"
							},
							{
								"name": "NormalThreshold",
								"desc": "float : Read|Write"
							},
							{
								"name": "OptimizationLevel1",
								"desc": "integer : Read|Write"
							},
							{
								"name": "OptimizationLevel2",
								"desc": "integer : Read|Write"
							},
							{
								"name": "OptimizationLevel3",
								"desc": "integer : Read|Write"
							},
							{
								"name": "OptimizationLevel4",
								"desc": "integer : Read|Write"
							},
							{
								"name": "OptimizationLevel5",
								"desc": "integer : Read|Write"
							},
							{
								"name": "OptimizationLevelMode",
								"desc": "integer : Read|Write"
							},
							{
								"name": "OptimizationLevelSteps",
								"desc": "integer : Read|Write"
							},
							{
								"name": "OptimizeBordersMode",
								"desc": "integer : Read|Write"
							},
							{
								"name": "OptimizeHidden",
								"desc": "bool : Read|Write"
							},
							{
								"name": "PreventFlippedNormals",
								"desc": "bool : Read|Write"
							},
							{
								"name": "RecreateFolderTree",
								"desc": "bool : Read|Write"
							},
							{
								"name": "SourceFileDir",
								"desc": "string : Read|Write"
							},
							{
								"name": "SourceFileFiles",
								"desc": "filename by value array : Read|Write"
							},
							{
								"name": "SourceFileMode",
								"desc": "integer : Read|Write"
							},
							{
								"name": "SourceFileSubDir",
								"desc": "bool : Read|Write"
							},
							{
								"name": "SymmetryMode",
								"desc": "integer : Read|Write"
							},
							{
								"name": "SymmetryTolerance",
								"desc": "integer : Read|Write"
							},
							{
								"name": "UVTolerance",
								"desc": "float : Read|Write"
							},
							{
								"name": "ValidateDialogs",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "VertexColorsTolerance",
								"desc": "integer : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "BipFixer",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "DoAdvAngSmoothing",
								"desc": "<void>DoAdvAngSmoothing <&node array>nodeTab <integer>width <float>damping\nnodeTab is In and Out parameter"
							},
							{
								"name": "DoAngBlurring",
								"desc": "<void>DoAngBlurring <&node array>nodeTab <integer>width <float>damping\nnodeTab is In and Out parameter"
							},
							{
								"name": "DoAngSmoothing",
								"desc": "<void>DoAngSmoothing <&node array>nodeTab <integer>width <float>damping\nnodeTab is In and Out parameter"
							},
							{
								"name": "DoKneeWobbleFix",
								"desc": "<void>DoKneeWobbleFix <&node array>nodeTab <float>frameThreshold <float>fluctuationThreshold\nnodeTab is In and Out parameter"
							},
							{
								"name": "DoPosBlurring",
								"desc": "<void>DoPosBlurring <&node array>nodeTab <integer>width <float>damping\nnodeTab is In and Out parameter"
							},
							{
								"name": "DoPosSmoothing",
								"desc": "<void>DoPosSmoothing <&node array>nodeTab <integer>width <float>damping\nnodeTab is In and Out parameter"
							},
							{
								"name": "DoRemoveKeys",
								"desc": "<void>DoRemoveKeys <&node array>nodeTab <integer>intervalWidth <boolean>deleteKeys\nnodeTab is In and Out parameter"
							}
						]
					}
				},
				{
					"name": "BipWorkBench",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetDrawDuringMove()",
								"desc": "<boolean>GetDrawDuringMove()"
							},
							{
								"name": "GetLayerEdit()",
								"desc": "<boolean>GetLayerEdit()"
							},
							{
								"name": "GetLimit180()",
								"desc": "<boolean>GetLimit180()"
							},
							{
								"name": "GetShowX()",
								"desc": "<boolean>GetShowX()"
							},
							{
								"name": "GetShowY()",
								"desc": "<boolean>GetShowY()"
							},
							{
								"name": "getShowZ()",
								"desc": "<boolean>getShowZ()"
							},
							{
								"name": "Open()",
								"desc": "<void>Open()"
							},
							{
								"name": "PosCurveToBipRoot()",
								"desc": "<void>PosCurveToBipRoot()"
							},
							{
								"name": "PosCurveToThisNode",
								"desc": "<void>PosCurveToThisNode <node>relativeToNode"
							},
							{
								"name": "PosCurveToWorld()",
								"desc": "<void>PosCurveToWorld()"
							},
							{
								"name": "ShowAngAccelCurve()",
								"desc": "<void>ShowAngAccelCurve()"
							},
							{
								"name": "ShowAngJerkCurve()",
								"desc": "<void>ShowAngJerkCurve()"
							},
							{
								"name": "ShowAngSpeedCurve()",
								"desc": "<void>ShowAngSpeedCurve()"
							},
							{
								"name": "ShowPosAccelCurve()",
								"desc": "<void>ShowPosAccelCurve()"
							},
							{
								"name": "ShowPosCurve()",
								"desc": "<void>ShowPosCurve()"
							},
							{
								"name": "ShowPosJerkCurve()",
								"desc": "<void>ShowPosJerkCurve()"
							},
							{
								"name": "ShowPosSpeedCurve()",
								"desc": "<void>ShowPosSpeedCurve()"
							},
							{
								"name": "ShowQuatCurve()",
								"desc": "<void>ShowQuatCurve()"
							},
							{
								"name": "ShowQuatXYZ()",
								"desc": "<void>ShowQuatXYZ()"
							},
							{
								"name": "ShowQuatXZY()",
								"desc": "<void>ShowQuatXZY()"
							},
							{
								"name": "ShowQuatYXZ()",
								"desc": "<void>ShowQuatYXZ()"
							},
							{
								"name": "ShowQuatYZX()",
								"desc": "<void>ShowQuatYZX()"
							},
							{
								"name": "ShowQuatZXY()",
								"desc": "<void>ShowQuatZXY()"
							},
							{
								"name": "ToggleDrawDuringMove()",
								"desc": "<void>ToggleDrawDuringMove()"
							},
							{
								"name": "ToggleLayerEdit()",
								"desc": "<void>ToggleLayerEdit()"
							},
							{
								"name": "ToggleLimit180()",
								"desc": "<void>ToggleLimit180()"
							},
							{
								"name": "ToggleShowX()",
								"desc": "<void>ToggleShowX()"
							},
							{
								"name": "ToggleShowY()",
								"desc": "<void>ToggleShowY()"
							},
							{
								"name": "ToggleShowZ()",
								"desc": "<void>ToggleShowZ()"
							}
						]
					}
				},
				{
					"name": "BitmapProxyMgr",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "globalProxyEnable",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "globalProxyRenderMode",
								"desc": "enum : Read|Write"
							},
							{
								"name": "globalProxySizeFactor",
								"desc": "enum : Read|Write"
							},
							{
								"name": "globalProxySizeMin",
								"desc": "integer : Read|Write"
							},
							{
								"name": "globalProxyRenderMode",
								"desc": "globalProxyRenderMode enums: {#renderMode_UseProxies|#renderMode_UseFullRes_KeepInMemory|#renderMode_UseFullRes_FlushFromMemory}"
							},
							{
								"name": "globalProxySizeFactor",
								"desc": "globalProxySizeFactor enums: {#full|#half|#third|#quarter|#eighth}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetProxyReady",
								"desc": "<boolean>GetProxyReady <string>bitmap"
							},
							{
								"name": "GetProxyUseGlobal",
								"desc": "<boolean>GetProxyUseGlobal <string>bitmap"
							},
							{
								"name": "GetProxySizeFactor",
								"desc": "<enum>GetProxySizeFactor <string>bitmap\nGetProxySizeFactor enums: {#full|#half|#third|#quarter|#eighth"
							},
							{
								"name": "SetProxySizeFactor",
								"desc": "<void>SetProxySizeFactor <string>bitmap <enum>factor\nfactor enums: {#full|#half|#third|#quarter|#eighth}"
							},
							{
								"name": "SetProxyUseGlobal",
								"desc": "<void>SetProxyUseGlobal <string>bitmap <boolean>useGlobal"
							}
						]
					}
				},
				{
					"name": "blockMgr",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetInstance",
								"desc": "<Interface>GetInstance <node>node <&node array>instances\ninstances is In and Out parameter"
							},
							{
								"name": "IsInstance",
								"desc": "<Interface>IsInstance <node>node"
							},
							{
								"name": "MakeBlockRefComponent",
								"desc": "<Interface>MakeBlockRefComponent <node>node"
							},
							{
								"name": "GetTopBlock",
								"desc": "<node>GetTopBlock <node>node"
							}
						]
					}
				},
				{
					"name": "BooleanObjectManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "AppendOperand",
								"desc": "<bool>AppendOperand <index>index <node>boolNode <node>operandNode <bool>hold"
							},
							{
								"name": "GetDisable",
								"desc": "<bool>GetDisable <index>index <index>operandIndex <&bool>disable\ndisable is Out parameter"
							},
							{
								"name": "GetNumBooleanObjects",
								"desc": "<bool>GetNumBooleanObjects <&integer>count\ncount is Out parameter"
							},
							{
								"name": "GetNumberOfChildren",
								"desc": "<bool>GetNumberOfChildren <index>index <index>operandIndex <&integer>children\nchildren is Out parameter"
							},
							{
								"name": "GetNumberOfOperands",
								"desc": "<bool>GetNumberOfOperands <index>index <&integer>count\ncount is Out parameter"
							},
							{
								"name": "GetOperandName",
								"desc": "<bool>GetOperandName <index>index <index>operandIndex <&TSTR>name\nname is Out parameter"
							},
							{
								"name": "GetOperandType",
								"desc": "<bool>GetOperandType <index>index <index>operandIndex <&enum>type\ntype enums: {#system|#generated}\ntype is Out parameter"
							},
							{
								"name": "GetOperationOptions",
								"desc": "<bool>GetOperationOptions <index>index <index>operandIndex <&enum>options\noptions enums: {#none|#imprint|#cookie}\noptions is Out parameter"
							},
							{
								"name": "GetOperationType",
								"desc": "<bool>GetOperationType <index>index <index>operandIndex <&enum>type\ntype enums: {#union|#intersection|#subtraction|#merge|#attach|#insert}\ntype is Out parameter"
							},
							{
								"name": "GetSeamSize",
								"desc": "<bool>GetSeamSize <index>index <index>operandIndex <time>time <&float>size <&interval>interval\nsize is Out parameter\ninterval is In and Out parameter"
							},
							{
								"name": "GetSeamType",
								"desc": "<bool>GetSeamType <index>index <index>operandIndex <&enum>type\ntype enums: {#simple|#fillet}\ntype is Out parameter"
							},
							{
								"name": "GetSolo",
								"desc": "<bool>GetSolo <index>index <index>operandIndex <&bool>solo\nsolo is Out parameter"
							},
							{
								"name": "GetSoloOperandIndex",
								"desc": "<bool>GetSoloOperandIndex <index>index <&index>operandIndex\noperandIndex is Out parameter"
							},
							{
								"name": "GetSubdivs",
								"desc": "<bool>GetSubdivs <index>index <index>operandIndex <time>time <&integer>subdivs <&interval>interval\nsubdivs is Out parameter\ninterval is In and Out parameter"
							},
							{
								"name": "HasSubdivs",
								"desc": "<bool>HasSubdivs <index>index <index>operandIndex <time>time <&bool>sub\nsub is Out parameter"
							},
							{
								"name": "RemoveOperand",
								"desc": "<bool>RemoveOperand <index>index <index>operandIndex"
							},
							{
								"name": "SetDisable",
								"desc": "<bool>SetDisable <index>index <index>operandIndex <bool>disable"
							},
							{
								"name": "SetOperandName",
								"desc": "<bool>SetOperandName <index>index <index>operandIndex <&TSTR>name\nname is In parameter"
							},
							{
								"name": "SetOperationOptions",
								"desc": "<bool>SetOperationOptions <index>index <index>operandIndex <enum>options\noptions enums: {#none|#imprint|#cookie}"
							},
							{
								"name": "SetOperationType",
								"desc": "<bool>SetOperationType <index>index <index>operandIndex <enum>type\ntype enums: {#union|#intersection|#subtraction|#merge|#attach|#insert}"
							},
							{
								"name": "SetSeamSize",
								"desc": "<bool>SetSeamSize <index>index <index>operandIndex <time>time <float>size"
							},
							{
								"name": "SetSeamType",
								"desc": "<bool>SetSeamType <index>index <index>operandIndex <enum>type\ntype enums: {#simple|#fillet}"
							},
							{
								"name": "SetSolo",
								"desc": "<bool>SetSolo <index>index <index>operandIndex <bool>solo"
							},
							{
								"name": "SetSubdivs",
								"desc": "<bool>SetSubdivs <index>index <index>operandIndex <time>time <integer>subdivs"
							}
						]
					}
				},
				{
					"name": "browserMgr",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "newBrowser",
								"desc": "<Interface>newBrowser <string>rootURL <boolean>showDirectory <boolean>showContent <boolean>showToolbar <boolean>showMenu"
							},
							{
								"name": "numBrowsers()",
								"desc": "<integer>numBrowsers()"
							}
						]
					}
				},
				{
					"name": "ContainerPreferences",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "displayStatusOverride",
								"desc": "enum : Read|Write"
							},
							{
								"name": "saveAsPreviousAccessType",
								"desc": "enum : Read|Write"
							},
							{
								"name": "updateCheck",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "updateOnLoad",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "updateOnReload",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "displayStatusOverride",
								"desc": "displayStatusOverride enums: {#always|#never|#perContainer}"
							},
							{
								"name": "saveAsPreviousAccessType",
								"desc": "saveAsPreviousAccessType enums: {#noAccess|#onlyEditInPlace|#onlyAddNewObjects|#anythingUnlocked}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "CreaseSetManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "CanSetCreaseColor",
								"desc": "<bool>CanSetCreaseColor <index>index"
							},
							{
								"name": "CanSetCreaseColorVisibility",
								"desc": "<bool>CanSetCreaseColorVisibility <index>index"
							},
							{
								"name": "CanSetCreaseContainerName",
								"desc": "<bool>CanSetCreaseContainerName <index>index"
							},
							{
								"name": "CanSetCreaseName",
								"desc": "<bool>CanSetCreaseName <index>index"
							},
							{
								"name": "CanSetCreaseValue",
								"desc": "<bool>CanSetCreaseValue <index>index"
							},
							{
								"name": "GetCreaseColor",
								"desc": "<bool>GetCreaseColor <index>index <&color>color\ncolor is Out parameter"
							},
							{
								"name": "GetCreaseColorVisibility",
								"desc": "<bool>GetCreaseColorVisibility <index>index"
							},
							{
								"name": "GetCreaseContainerName",
								"desc": "<bool>GetCreaseContainerName <index>index <&TSTR>name\nname is Out parameter"
							},
							{
								"name": "GetCreaseEntityCount",
								"desc": "<bool>GetCreaseEntityCount <index>index <&integer>count\ncount is Out parameter"
							},
							{
								"name": "GetCreaseName",
								"desc": "<bool>GetCreaseName <index>index <&TSTR>name\nname is Out parameter"
							},
							{
								"name": "GetCreaseType",
								"desc": "<bool>GetCreaseType <index>index <&integer>type\ntype is Out parameter"
							},
							{
								"name": "GetCreaseValue",
								"desc": "<bool>GetCreaseValue <index>index <time>time <&float>value <&interval>interval\nvalue is Out parameter\ninterval is In and Out parameter"
							},
							{
								"name": "GetNodelistAll",
								"desc": "<bool>GetNodelistAll <&node array>nodetab\nnodetab is Out parameter"
							},
							{
								"name": "GetNodelistSingle",
								"desc": "<bool>GetNodelistSingle <index>index <&node array>nodetab\nnodetab is Out parameter"
							},
							{
								"name": "GetNumCreaseSets",
								"desc": "<bool>GetNumCreaseSets <&integer>count\ncount is Out parameter"
							},
							{
								"name": "GetValidity",
								"desc": "<bool>GetValidity <time>time <&interval>interval\ninterval is Out parameter"
							},
							{
								"name": "SetCreaseColor",
								"desc": "<bool>SetCreaseColor <index>index <color>color"
							},
							{
								"name": "SetCreaseContainerName",
								"desc": "<bool>SetCreaseContainerName <index>index <string>name"
							},
							{
								"name": "SetCreaseName",
								"desc": "<bool>SetCreaseName <index>index <string>name"
							},
							{
								"name": "SetCreaseValue",
								"desc": "<bool>SetCreaseValue <index>index <time>time <float>value"
							}
						]
					}
				},
				{
					"name": "custAttribCollapseManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "retainSubAnimCAs",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "surviveState",
								"desc": "boolean : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "CustomControlsOptions",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "PrintIconPaths",
								"desc": "bool : Read|Write"
							},
							{
								"name": "PrintTextClippingIssues",
								"desc": "bool : Read|Write"
							},
							{
								"name": "TextClippingIssuesSensitivityX",
								"desc": "integer : Read|Write"
							},
							{
								"name": "TextClippingIssuesSensitivityY",
								"desc": "integer : Read|Write"
							},
							{
								"name": "UIUserScaleFactor",
								"desc": "float : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "SetPrintIconPathsPersist",
								"desc": "<void>SetPrintIconPathsPersist <bool>print_paths <bool>persist"
							},
							{
								"name": "SetPrintTextClippingIssuesPersist",
								"desc": "<void>SetPrintTextClippingIssuesPersist <bool>print_issues <bool>persist"
							},
							{
								"name": "SetTextClippingIssuesSensitivityXPersist",
								"desc": "<void>SetTextClippingIssuesSensitivityXPersist <integer>sensitivity <bool>persist"
							}
						]
					}
				},
				{
					"name": "DaylightSimulationUIOps",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "Visible",
								"desc": "bool : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "DaylightSimulationUtilities",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "IsMentalRaySkyDaylightSystem",
								"desc": "<boolean>IsMentalRaySkyDaylightSystem <Interface>daylightSystem\nIsMentalRaySkyDaylightSystem - no automatic redraw after invoked"
							},
							{
								"name": "IsMentalRaySunDaylightSystem",
								"desc": "<boolean>IsMentalRaySunDaylightSystem <Interface>daylightSystem\nIsMentalRaySunDaylightSystem - no automatic redraw after invoked"
							},
							{
								"name": "IsShadowCastingDaylightSystem",
								"desc": "<boolean>IsShadowCastingDaylightSystem <Interface>daylightSystem\nIsShadowCastingDaylightSystem - no automatic redraw after invoked"
							},
							{
								"name": "IsSkyOn",
								"desc": "<boolean>IsSkyOn <Interface>daylightSystem\nIsSkyOn - no automatic redraw after invoked"
							},
							{
								"name": "IsSunOn",
								"desc": "<boolean>IsSunOn <Interface>daylightSystem\nIsSunOn - no automatic redraw after invoked"
							},
							{
								"name": "IsValidSkyMultiplier",
								"desc": "<boolean>IsValidSkyMultiplier <Interface>daylightSystem\nIsValidSkyMultiplier - no automatic redraw after invoked"
							},
							{
								"name": "IsValidSunMultiplier",
								"desc": "<boolean>IsValidSunMultiplier <Interface>daylightSystem\nIsValidSunMultiplier - no automatic redraw after invoked"
							},
							{
								"name": "SetRenderIterative",
								"desc": "<void>SetRenderIterative <boolean>renderIterative\nSetRenderIterative - no automatic redraw after invoked"
							}
						]
					}
				},
				{
					"name": "DaylightSystemFactory",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "DaylightSystemFactory2",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "defaultActions",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "getMsgLogMsgs",
								"desc": "<TSTR by value array>getMsgLogMsgs <enum>eventID\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}"
							},
							{
								"name": "getActionTitle",
								"desc": "<TSTR by value>getActionTitle <enum>eventID\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}"
							},
							{
								"name": "getActionTitleByIndex",
								"desc": "<TSTR by value>getActionTitleByIndex <index>index"
							},
							{
								"name": "getMsgLogMsg",
								"desc": "<TSTR by value>getMsgLogMsg <enum>eventID <index>index\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}"
							},
							{
								"name": "deleteAction",
								"desc": "<boolean>deleteAction <enum>eventID\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}"
							},
							{
								"name": "getAction",
								"desc": "<boolean>getAction <enum>eventID <&enum array>action\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}\naction enums: {#logToFile|#logmsg|#abort}\naction is Out parameter"
							},
							{
								"name": "logEntry",
								"desc": "<boolean>logEntry <enum>eventID <string>message\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}"
							},
							{
								"name": "setAction",
								"desc": "<boolean>setAction <enum>eventID <&enum array>action title:<string> oldAction:<&enum array>\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}\naction enums: {#logToFile|#logmsg|#abort}\naction is In parameter\ntitle default value: undefined\noldAction enums: {#logToFile|#logmsg|#abort}\noldAction default value: #()\noldAction is Out parameter"
							},
							{
								"name": "getActionIDByIndex",
								"desc": "<enum>getActionIDByIndex <index>index\ngetActionIDByIndex enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles"
							},
							{
								"name": "getMsgLogID",
								"desc": "<enum>getMsgLogID <index>index\ngetMsgLogID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles"
							},
							{
								"name": "getActionCount()",
								"desc": "<integer>getActionCount()"
							},
							{
								"name": "getMsgLogCount",
								"desc": "<integer>getMsgLogCount <enum>eventID\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}"
							},
							{
								"name": "MsgLogClear",
								"desc": "<void>MsgLogClear <enum>eventID\neventID enums: {#missingExtFiles|#missingDLLs|#missingXRefs|#missingUVW|#unsupportedRendereffect|#invalidXRefFiles}"
							}
						]
					}
				},
				{
					"name": "DialogMonitorOPS",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "Enabled",
								"desc": "bool : Read|Write"
							},
							{
								"name": "Interactive",
								"desc": "bool : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "RegisterNotification",
								"desc": "<bool>RegisterNotification <value>Callback ID:<name>\nRegisterNotification - no automatic redraw after invoked\nID default value: undefined"
							}
						]
					}
				},
				{
					"name": "DisplayManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "dragAndDrop",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "DownloadUrlToDisk",
								"desc": "<boolean>DownloadUrlToDisk <string>url <filename>fileName <integer>flags"
							},
							{
								"name": "downloadPackage",
								"desc": "<boolean>downloadPackage <&filename array>files <filename>directory <boolean>showProgress\nfiles is In and Out parameter"
							},
							{
								"name": "dropPackage",
								"desc": "<boolean>dropPackage <HWND>window <&point>mousePoint <&filename array>files applyUIScaling:<bool>\nmousePoint is In and Out parameter\nfiles is In and Out parameter\napplyUIScaling default value: true"
							},
							{
								"name": "enableDragAndDrop",
								"desc": "<boolean>enableDragAndDrop <HWND>window <boolean>onOff"
							},
							{
								"name": "isEnabled()",
								"desc": "<boolean>isEnabled()"
							},
							{
								"name": "getDownloadDirectory()",
								"desc": "<filename>getDownloadDirectory()"
							},
							{
								"name": "globalEnableDragAndDrop",
								"desc": "<void>globalEnableDragAndDrop <boolean>onOff"
							}
						]
					}
				},
				{
					"name": "dxshadermanager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "IsVisible()",
								"desc": "<boolean>IsVisible()"
							},
							{
								"name": "SetVisible",
								"desc": "<float>SetVisible <boolean>show"
							},
							{
								"name": "getViewportManager",
								"desc": "<maxObject>getViewportManager <material>material"
							}
						]
					}
				},
				{
					"name": "EPolyManipGrip",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "SetManipulateGrip",
								"desc": "<void>SetManipulateGrip <bool>on <enum>gripItem\ngripItem enums: {#SSFalloff|#SSBubble|#SSPinch|#SetFlow|#LoopShift|#RingShift|#EdgeCrease|#EdgeWeight|#VertexWeight|#VertexCrease}"
							}
						]
					}
				},
				{
					"name": "FileResolutionManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetMaximumCacheDuration()",
								"desc": "<DWORD>GetMaximumCacheDuration()"
							},
							{
								"name": "GetNumCacheHit()",
								"desc": "<INT64>GetNumCacheHit()"
							},
							{
								"name": "IsCachingEnabled()",
								"desc": "<bool>IsCachingEnabled()"
							},
							{
								"name": "getFullFilePath",
								"desc": "<bool>getFullFilePath <&TSTR>filePath <enum>assetType byPassCache:<bool>\nfilePath is In and Out parameter\nassetType enums: {#Other|#Bitmap|#XRef|#Photometric|#Animation|#VideoPost|#BatchRender|#ExternalLink|#RenderOutput|#PreRenderScript|#PostRenderScript|#Sound|#Container|#MaxCreationGraph}\nbyPassCache default value: false"
							},
							{
								"name": "getFullFilePath_assetID",
								"desc": "<bool>getFullFilePath_assetID <TSTR>assetID <&TSTR>filePath byPassCache:<bool>\nfilePath is Out parameter\nbyPassCache default value: false"
							},
							{
								"name": "GetNumAssetTypes()",
								"desc": "<integer>GetNumAssetTypes()"
							},
							{
								"name": "DisableCaching()",
								"desc": "<void>DisableCaching()"
							},
							{
								"name": "EnableCaching()",
								"desc": "<void>EnableCaching()"
							},
							{
								"name": "SetMaximumCacheDuration",
								"desc": "<void>SetMaximumCacheDuration <DWORD>newMaxDuration"
							},
							{
								"name": "doGetUniversalFileName",
								"desc": "<void>doGetUniversalFileName <&TSTR>aFullFilePath\naFullFilePath is In and Out parameter"
							}
						]
					}
				},
				{
					"name": "FlightStudioExport",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetAutoGroup()",
								"desc": "<boolean>GetAutoGroup()"
							},
							{
								"name": "GetAutoObject()",
								"desc": "<boolean>GetAutoObject()"
							},
							{
								"name": "GetCopyTextures()",
								"desc": "<boolean>GetCopyTextures()"
							},
							{
								"name": "GetMatrixEpsilon()",
								"desc": "<float>GetMatrixEpsilon()"
							},
							{
								"name": "SetAutoGroup",
								"desc": "<void>SetAutoGroup <boolean>AutoGroup"
							},
							{
								"name": "SetAutoObject",
								"desc": "<void>SetAutoObject <boolean>AutoObject"
							},
							{
								"name": "SetMatrixEpsilon",
								"desc": "<void>SetMatrixEpsilon <float>MatrixEpsilon"
							}
						]
					}
				},
				{
					"name": "FrameTagManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "CreateNewTag",
								"desc": "<DWORD>CreateNewTag <string>name <time>time lockID:<DWORD> scale:<boolean>\nlockID default value: 0\nscale default value: true"
							},
							{
								"name": "GetLockIDByID",
								"desc": "<DWORD>GetLockIDByID <DWORD>id"
							},
							{
								"name": "GetTagID",
								"desc": "<DWORD>GetTagID <index>index"
							},
							{
								"name": "GetNameByID",
								"desc": "<TSTR>GetNameByID <DWORD>id"
							},
							{
								"name": "GetScaleByID",
								"desc": "<boolean>GetScaleByID <DWORD>id"
							},
							{
								"name": "SetLockIDByID",
								"desc": "<boolean>SetLockIDByID <DWORD>id <DWORD>lockID"
							},
							{
								"name": "FindItem",
								"desc": "<index>FindItem <DWORD>id"
							},
							{
								"name": "FindItemByTime",
								"desc": "<index>FindItemByTime <time>time"
							},
							{
								"name": "GetTagCount()",
								"desc": "<integer>GetTagCount()"
							},
							{
								"name": "GetTimeByID",
								"desc": "<time>GetTimeByID <DWORD>id relative:<boolean>\nrelative default value: false"
							},
							{
								"name": "DeleteTag",
								"desc": "<void>DeleteTag <DWORD>id"
							},
							{
								"name": "ResetFrameTags()",
								"desc": "<void>ResetFrameTags()"
							},
							{
								"name": "SetNameByID",
								"desc": "<void>SetNameByID <DWORD>id <&TSTR>name\nname is In parameter"
							},
							{
								"name": "SetScaleByID",
								"desc": "<void>SetScaleByID <DWORD>id <boolean>scale"
							},
							{
								"name": "SetTimeByID",
								"desc": "<void>SetTimeByID <DWORD>id <time>time relative:<boolean>\nrelative default value: false"
							}
						]
					}
				},
				{
					"name": "globalDXDisplayManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "forceSelected",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "forceSoftware",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "sceneEffectActive",
								"desc": "boolean : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "Hair",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "CanUseLights",
								"desc": "<boolean>CanUseLights <node array>nodes"
							},
							{
								"name": "AddEffect",
								"desc": "<void>AddEffect <boolean>showGUI"
							},
							{
								"name": "AddHairProperties",
								"desc": "<void>AddHairProperties <node array>nodes"
							},
							{
								"name": "AddMod",
								"desc": "<void>AddMod <node array>nodes"
							},
							{
								"name": "ExportDRA",
								"desc": "<void>ExportDRA <filename>draFileName <time>time <integer>voxels"
							},
							{
								"name": "ExportDRA2",
								"desc": "<void>ExportDRA2 <filename>draFileName <time>time <integer>voxels <&integer array>shaveNodeIDs\nshaveNodeIDs is In and Out parameter"
							},
							{
								"name": "Purge()",
								"desc": "<void>Purge()"
							},
							{
								"name": "RemoveHairProperties",
								"desc": "<void>RemoveHairProperties <node array>nodes"
							}
						]
					}
				},
				{
					"name": "HelpSystem",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "defaultLocalProductHelpPath",
								"desc": "string : Read"
							},
							{
								"name": "localProductHelpPath",
								"desc": "string : Read|Write"
							},
							{
								"name": "productHelpLocation",
								"desc": "enum : Read|Write"
							},
							{
								"name": "productHelpLocation",
								"desc": "productHelpLocation enums: {#onlineHelp|#localHelp}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "SearchProductHelp",
								"desc": "<void>SearchProductHelp <string>searchFor"
							},
							{
								"name": "ShowProductHelp",
								"desc": "<void>ShowProductHelp <integer>helpContextId"
							}
						]
					}
				},
				{
					"name": "IAutoCamMax",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "HidePivotBall",
								"desc": "<void>HidePivotBall <HWND>hwnd"
							},
							{
								"name": "ShowPivotBall",
								"desc": "<void>ShowPivotBall <HWND>hwnd <&point2>mouse <&point3>center <boolean>useMousePoint applyUIScaling:<bool>\nmouse is In and Out parameter\ncenter is In and Out parameter\napplyUIScaling default value: true"
							}
						]
					}
				},
				{
					"name": "ICEFlowShapeControl",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "ICEFlowSystemFactory",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "iDisplayGamma",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "LUTFileName",
								"desc": "filename : Read|Write"
							},
							{
								"name": "affectColorPickers",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "affectMEdit",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "colorCorrectionMode",
								"desc": "enum : Read|Write"
							},
							{
								"name": "colorCorrectionPrefMode",
								"desc": "enum : Read|Write"
							},
							{
								"name": "gamma",
								"desc": "float : Read|Write"
							},
							{
								"name": "colorCorrectionMode",
								"desc": "colorCorrectionMode enums: {#LUT|#gamma|#none}"
							},
							{
								"name": "colorCorrectionPrefMode",
								"desc": "colorCorrectionPrefMode enums: {#LUT|#gamma|#none}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "IInteractionMode",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "CurrentMode",
								"desc": "enum : Read|Write"
							},
							{
								"name": "CurrentMode",
								"desc": "CurrentMode enums: {#3dsMaxMode|#MayaMode|#CustomizedMode}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "IMetaDataManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "InstanceMgr",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "autoMtlPropagation",
								"desc": "boolean : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetInstances",
								"desc": "<DWORD>GetInstances <node>source <&node array>instances\ninstances is Out parameter"
							},
							{
								"name": "SetMtlOnInstances",
								"desc": "<DWORD>SetMtlOnInstances <node>source <material>newMtl"
							},
							{
								"name": "CanMakeModifiersUnique",
								"desc": "<bool>CanMakeModifiersUnique <&node array>nodes <&maxObject array>modifiers\nnodes is In parameter\nmodifiers is In parameter"
							},
							{
								"name": "CanMakeObjectsUnique",
								"desc": "<bool>CanMakeObjectsUnique <&node array>nodes\nnodes is In parameter"
							},
							{
								"name": "MakeControllersUnique",
								"desc": "<bool>MakeControllersUnique <&node array>nodes <&maxObject array>controllers <enum>multiNodeOption\nnodes is In parameter\ncontrollers is In parameter\nmultiNodeOption enums: {#prompt|#individual|#group}"
							},
							{
								"name": "MakeModifiersUnique",
								"desc": "<bool>MakeModifiersUnique <&node array>nodes <&maxObject array>modifiers <enum>multiNodeOption\nnodes is In parameter\nmodifiers is In parameter\nmultiNodeOption enums: {#prompt|#individual|#group}"
							},
							{
								"name": "MakeObjectsUnique",
								"desc": "<bool>MakeObjectsUnique <&node array>nodes <enum>multiNodeOption\nnodes is In parameter\nmultiNodeOption enums: {#prompt|#individual|#group}"
							}
						]
					}
				},
				{
					"name": "IRTShadeTreeCompiler",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "IsolatedVertices",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "hasPropertyDlg()",
								"desc": "<bool>hasPropertyDlg()"
							},
							{
								"name": "Check",
								"desc": "<enum>Check <time>time <node>nodeToCheck <&index array>results\nCheck enums: {#Failed|#Vertices|#Edges|#Faces\nresults is In and Out parameter"
							}
						]
					}
				},
				{
					"name": "IsolateSelection",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "ZoomExtents",
								"desc": "boolean : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "EnterIsolateSelectionMode()",
								"desc": "<boolean>EnterIsolateSelectionMode()"
							},
							{
								"name": "ExitIsolateSelectionMode()",
								"desc": "<boolean>ExitIsolateSelectionMode()"
							},
							{
								"name": "IsNodeIsolated",
								"desc": "<boolean>IsNodeIsolated <node>node"
							},
							{
								"name": "IsolateSelectionModeActive()",
								"desc": "<boolean>IsolateSelectionModeActive()"
							}
						]
					}
				},
				{
					"name": "ITabDialogManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "IViewportShadingMgr",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "AutoDisplaySelLights",
								"desc": "bool : Read|Write"
							},
							{
								"name": "DefaultLightCastShadows",
								"desc": "bool : Read|Write"
							},
							{
								"name": "GlobalShadowIntensity",
								"desc": "float : Read|Write"
							},
							{
								"name": "MaxActiveLight",
								"desc": "integer : Read|Write"
							},
							{
								"name": "ShadingLimits",
								"desc": "enum : Read|Write"
							},
							{
								"name": "ShadowFilterSize",
								"desc": "float : Read|Write"
							},
							{
								"name": "UpdateShadowsInActiveViewportOnly",
								"desc": "bool : Read|Write"
							},
							{
								"name": "UseGITransparency",
								"desc": "bool : Read|Write"
							},
							{
								"name": "UseTransparencyInShadows",
								"desc": "bool : Read|Write"
							},
							{
								"name": "ShadingLimits",
								"desc": "ShadingLimits enums: {#None|#Good|#Best}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "IsLightNodeSupported",
								"desc": "<bool>IsLightNodeSupported <node>LightNode"
							},
							{
								"name": "IsShadingLimitValid",
								"desc": "<bool>IsShadingLimitValid <enum>ShadingLimits\nShadingLimits enums: {#None|#Good|#Best}"
							},
							{
								"name": "CastShadowsSelectedOnly",
								"desc": "<void>CastShadowsSelectedOnly <bool>Enabled"
							},
							{
								"name": "DisplayOnlySelectedLights()",
								"desc": "<void>DisplayOnlySelectedLights()"
							},
							{
								"name": "GetViewportShadingLights",
								"desc": "<void>GetViewportShadingLights <&node array>nodeList <enum>lightProperty\nnodeList is In and Out parameter\nlightProperty enums: {#ShadowCasting|#Illuminating|#Locked}"
							},
							{
								"name": "LockSelectedLights",
								"desc": "<void>LockSelectedLights <bool>locked"
							},
							{
								"name": "ReviewGPUDiagnostics()",
								"desc": "<void>ReviewGPUDiagnostics()"
							},
							{
								"name": "SelectIlluminatingLights()",
								"desc": "<void>SelectIlluminatingLights()"
							},
							{
								"name": "SelectShadowCastingLights()",
								"desc": "<void>SelectShadowCastingLights()"
							}
						]
					}
				},
				{
					"name": "LayerManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "count",
								"desc": "integer : Read"
							},
							{
								"name": "current",
								"desc": "Interface : Read"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "getLayer",
								"desc": "<Interface>getLayer <integer>which\ngetLayer - no automatic redraw after invoked"
							},
							{
								"name": "getLayerFromName",
								"desc": "<Interface>getLayerFromName <string>name\ngetLayerFromName - no automatic redraw after invoked"
							},
							{
								"name": "newLayerFromName",
								"desc": "<Interface>newLayerFromName <string>name\nnewLayerFromName - no automatic redraw after invoked"
							},
							{
								"name": "deleteLayerByName",
								"desc": "<bool>deleteLayerByName <string>name\ndeleteLayerByName - no automatic redraw after invoked"
							},
							{
								"name": "doesLayerHierarchyContainNodes",
								"desc": "<bool>doesLayerHierarchyContainNodes <string>name\ndoesLayerHierarchyContainNodes - no automatic redraw after invoked"
							},
							{
								"name": "deleteLayerHierarchy",
								"desc": "<integer>deleteLayerHierarchy <string>name forceDelete:<bool>\ndeleteLayerHierarchy - no automatic redraw after invoked\nforceDelete default value: false"
							},
							{
								"name": "editLayerByName",
								"desc": "<void>editLayerByName <string>name\neditLayerByName - no automatic redraw after invoked"
							},
							{
								"name": "layerPropDialog",
								"desc": "<void>layerPropDialog <&maxObject array>layerList\nlayerPropDialog - no automatic redraw after invoked\nlayerList is In and Out parameter"
							}
						]
					}
				},
				{
					"name": "LightingAnalysisOverlayFactory",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "LockedComponentsMan",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "LockedTracksMan",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "unLockOverride",
								"desc": "bool : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetExposedUI",
								"desc": "<bool>GetExposedUI <maxObject>anim"
							},
							{
								"name": "GetLocked",
								"desc": "<bool>GetLocked <maxObject>anim <maxObject>client <index>subNum <bool>checkOverride"
							},
							{
								"name": "IsLockable",
								"desc": "<bool>IsLockable <maxObject>anim <maxObject>client <index>subNum"
							},
							{
								"name": "GetUberUnLockOverride()",
								"desc": "<integer>GetUberUnLockOverride()"
							},
							{
								"name": "FindLockedAnims",
								"desc": "<void>FindLockedAnims <bool>locked <bool>checkOverride <maxObject>refTarget <&maxObject array>anims <&maxObject array>clients <&index array>subNums\nanims is In and Out parameter\nclients is In and Out parameter\nsubNums is In and Out parameter"
							},
							{
								"name": "PopUberUnLockOverride()",
								"desc": "<void>PopUberUnLockOverride()"
							},
							{
								"name": "PushUberUnLockOverride()",
								"desc": "<void>PushUberUnLockOverride()"
							},
							{
								"name": "SetExposedUI",
								"desc": "<void>SetExposedUI <bool>expose <&maxObject array>anims\nanims is In and Out parameter"
							},
							{
								"name": "SetLocks",
								"desc": "<void>SetLocks <bool>lock <&maxObject array>anims <&maxObject array>clients <&index array>subNums <bool>includeChildren\nanims is In and Out parameter\nclients is In and Out parameter\nsubNums is In and Out parameter"
							},
							{
								"name": "ToggleLocks",
								"desc": "<void>ToggleLocks <&maxObject array>anims <&maxObject array>clients <&index array>subNums <bool>includeChildren\nanims is In and Out parameter\nclients is In and Out parameter\nsubNums is In and Out parameter"
							},
							{
								"name": "UnlockChildren",
								"desc": "<void>UnlockChildren <&maxObject array>anims <&maxObject array>clients <&index array>subNums\nanims is In and Out parameter\nclients is In and Out parameter\nsubNums is In and Out parameter"
							}
						]
					}
				},
				{
					"name": "MainThreadTaskManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "MaterialExplorerManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "LoadMaterialExplorerConfiguration",
								"desc": "<bool>LoadMaterialExplorerConfiguration <&TSTR>configurationFile\nLoadMaterialExplorerConfiguration - no automatic redraw after invoked\nconfigurationFile is In parameter"
							},
							{
								"name": "SaveMaterialExplorerConfiguration",
								"desc": "<bool>SaveMaterialExplorerConfiguration <&TSTR>outputConfigurationFile\nSaveMaterialExplorerConfiguration - no automatic redraw after invoked\noutputConfigurationFile is In parameter"
							}
						]
					}
				},
				{
					"name": "maxOps",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "IsRenderActive",
								"desc": "boolean : Read"
							},
							{
								"name": "affectChildren",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "autoGrid",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "autoKeyDefaultKeyOn",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "autoKeyDefaultKeyTime",
								"desc": "time : Read|Write"
							},
							{
								"name": "hideFrozenObjects",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "inProgressiveMode",
								"desc": "boolean : Read"
							},
							{
								"name": "isNetworkLicense",
								"desc": "boolean : Read"
							},
							{
								"name": "languageToUseForFileIO",
								"desc": "enum : Read|Write"
							},
							{
								"name": "legacyFilesCanBeStoredUsingUTF8",
								"desc": "bool : Read|Write"
							},
							{
								"name": "mtlDlgMode",
								"desc": "enum : Read|Write"
							},
							{
								"name": "nameSuffixLength",
								"desc": "integer : Read|Write"
							},
							{
								"name": "overrideControllerRangeDefault",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "overrideLanguageSpecifiedInSceneFile",
								"desc": "bool : Read|Write"
							},
							{
								"name": "paintSelBrushSize",
								"desc": "integer : Read|Write"
							},
							{
								"name": "paintSelBrushSizeUnscaled",
								"desc": "integer : Read|Write"
							},
							{
								"name": "pivotMode",
								"desc": "enum : Read|Write"
							},
							{
								"name": "productAppID",
								"desc": "enum : Read"
							},
							{
								"name": "rendUseIterative",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "setKeyFilters",
								"desc": "enum by value array : Read"
							},
							{
								"name": "setKeyMode",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "setKeyNodeSetCurrent",
								"desc": "TSTR : Read|Write"
							},
							{
								"name": "setKeyNodeSets",
								"desc": "TSTR by value array : Read"
							},
							{
								"name": "setKeySuspend",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "showWorldAxis",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "springQuickEditMode",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "springRollingStart",
								"desc": "integer : Read|Write"
							},
							{
								"name": "startNewShapeLock",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "trackbar",
								"desc": "Interface : Read"
							},
							{
								"name": "trajectoryAddKeyMode",
								"desc": "bool : Read|Write"
							},
							{
								"name": "trajectoryKeySubMode",
								"desc": "bool : Read|Write"
							},
							{
								"name": "trajectoryMode",
								"desc": "bool : Read|Write"
							},
							{
								"name": "useCodePageSpecifiedInSceneFile",
								"desc": "bool : Read|Write"
							},
							{
								"name": "languageToUseForFileIO",
								"desc": "languageToUseForFileIO enums: {#current|#English|#German|#French|#Japanese|#Korean|#Chinese}"
							},
							{
								"name": "mtlDlgMode",
								"desc": "mtlDlgMode enums: {#basic|#advanced}"
							},
							{
								"name": "pivotMode",
								"desc": "pivotMode enums: {#none|#pivotOnly|#objectOnly|#hierarchyOnly}"
							},
							{
								"name": "productAppID",
								"desc": "productAppID enums: {#max}"
							},
							{
								"name": "setKeyFilters",
								"desc": "setKeyFilters enums: {#all|#position|#rotation|#scale|#ikParams|#objParams|#custAttribs|#modifiers|#materials|#other}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "getViewportShadingSettings()",
								"desc": "<IObject>getViewportShadingSettings()"
							},
							{
								"name": "GetCurRenderElementMgr()",
								"desc": "<Interface>GetCurRenderElementMgr()"
							},
							{
								"name": "GetRenderElementMgr",
								"desc": "<Interface>GetRenderElementMgr <enum>\nenums: {#Production|#Draft}"
							},
							{
								"name": "getTrackBar()",
								"desc": "<Interface>getTrackBar()"
							},
							{
								"name": "IncrementFileName",
								"desc": "<TSTR by value>IncrementFileName <TSTR by value>fileName versionSeparatorString:<TSTR by value>\nversionSeparatorString default value: """
							},
							{
								"name": "IncrementImageFileName",
								"desc": "<TSTR by value>IncrementImageFileName <TSTR by value>fileName"
							},
							{
								"name": "IncrementSceneFileName",
								"desc": "<TSTR by value>IncrementSceneFileName <TSTR by value>fileName"
							},
							{
								"name": "CloneNodes",
								"desc": "<bool>CloneNodes <&node array>nodes offset:<point3 by value> expandHierarchy:<bool> cloneType:<enum> actualNodeList:<&node array> newNodes:<&node array>\nnodes is In parameter\noffset default value: [0,0,0]\nexpandHierarchy default value: false\ncloneType enums: {#copy|#instance|#reference}\ncloneType default value: #copy\nactualNodeList default value: #()\nactualNodeList is Out parameter\nnewNodes default value: #()\nnewNodes is Out parameter"
							},
							{
								"name": "CollapseNodeTo",
								"desc": "<boolean>CollapseNodeTo <node>node <index>modIndex <boolean>noWarning"
							},
							{
								"name": "allTracksSetKeyBufferPresent()",
								"desc": "<boolean>allTracksSetKeyBufferPresent()"
							},
							{
								"name": "canImportBitmap",
								"desc": "<boolean>canImportBitmap <filename>fileName"
							},
							{
								"name": "getSetKeyFilterState",
								"desc": "<boolean>getSetKeyFilterState <enum>filter\nfilter enums: {#all|#position|#rotation|#scale|#ikParams|#objParams|#custAttribs|#modifiers|#materials|#other}"
							},
							{
								"name": "getSetKeyMode()",
								"desc": "<boolean>getSetKeyMode()"
							},
							{
								"name": "loadCUIFile",
								"desc": "<boolean>loadCUIFile <filename>fileName"
							},
							{
								"name": "setSelectionType",
								"desc": "<boolean>setSelectionType <boolean>auto <enum>method\nmethod enums: {#window|#crossing|#leftToRight|#rightToLeft}"
							},
							{
								"name": "setSetKeyFilterState",
								"desc": "<boolean>setSetKeyFilterState <enum>filter <boolean>onOff\nfilter enums: {#all|#position|#rotation|#scale|#ikParams|#objParams|#custAttribs|#modifiers|#materials|#other}"
							},
							{
								"name": "getTransformGizmoTM()",
								"desc": "<matrix3>getTransformGizmoTM()"
							},
							{
								"name": "getNodeByHandle",
								"desc": "<maxObject>getNodeByHandle <DWORD>handle"
							},
							{
								"name": "CollapseNode",
								"desc": "<void>CollapseNode <node>node <boolean>noWarning"
							},
							{
								"name": "activateSetKeyMode",
								"desc": "<void>activateSetKeyMode <boolean>onOff"
							},
							{
								"name": "allTracksCommitSetKeyBuffer()",
								"desc": "<void>allTracksCommitSetKeyBuffer()"
							},
							{
								"name": "allTracksRevertSetKeyBuffer()",
								"desc": "<void>allTracksRevertSetKeyBuffer()"
							},
							{
								"name": "beginProgressiveMode()",
								"desc": "<void>beginProgressiveMode()"
							},
							{
								"name": "colorById",
								"desc": "<void>colorById <DWORD>id <&color>color\ncolor is Out parameter"
							},
							{
								"name": "deleteSelectedAnimation()",
								"desc": "<void>deleteSelectedAnimation()"
							},
							{
								"name": "deleteSelectedTrajectoryKey()",
								"desc": "<void>deleteSelectedTrajectoryKey()"
							},
							{
								"name": "endProgressiveMode()",
								"desc": "<void>endProgressiveMode()"
							},
							{
								"name": "findNodes",
								"desc": "<void>findNodes <&node array>templateNodes <&node array>foundNodes nodePropsToMatch:<&enum array>\ntemplateNodes is In parameter\nfoundNodes is Out parameter\nnodePropsToMatch enums: {#nodePropMaterial|#nodePropLayer}\nnodePropsToMatch default value: #()\nnodePropsToMatch is In parameter"
							},
							{
								"name": "getDefaultTangentType",
								"desc": "<void>getDefaultTangentType <&enum>dfltInTangentType <&enum>dfltOutTangentType\ndfltInTangentType enums: {#smooth|#linear|#step|#fast|#slow|#custom|#flat}\ndfltInTangentType is Out parameter\ndfltOutTangentType enums: {#smooth|#linear|#step|#fast|#slow|#custom|#flat}\ndfltOutTangentType is Out parameter"
							},
							{
								"name": "persistFileLanguageSettings()",
								"desc": "<void>persistFileLanguageSettings()"
							},
							{
								"name": "setActiveViewportTransparencyDisplay",
								"desc": "<void>setActiveViewportTransparencyDisplay <integer>transparencyLevel"
							},
							{
								"name": "setDefaultTangentType",
								"desc": "<void>setDefaultTangentType <enum>dfltInTangentType <enum>dfltOutTangentType writeInCfgFile:<boolean>\ndfltInTangentType enums: {#smooth|#linear|#step|#fast|#slow|#custom|#flat}\ndfltOutTangentType enums: {#smooth|#linear|#step|#fast|#slow|#custom|#flat}\nwriteInCfgFile default value: true"
							},
							{
								"name": "setInNonInteractiveTestMode()",
								"desc": "<void>setInNonInteractiveTestMode()"
							},
							{
								"name": "startNewShape()",
								"desc": "<void>startNewShape()"
							}
						]
					}
				},
				{
					"name": "MaxRibbon",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "LoadRibbonConfig",
								"desc": "<void>LoadRibbonConfig <&TSTR>configFile\nLoadRibbonConfig - no automatic redraw after invoked\nconfigFile is In and Out parameter"
							},
							{
								"name": "SaveRibbonConfig",
								"desc": "<void>SaveRibbonConfig <&TSTR>configFile\nSaveRibbonConfig - no automatic redraw after invoked\nconfigFile is In and Out parameter"
							},
							{
								"name": "SetRibbonDockState",
								"desc": "<void>SetRibbonDockState <enum>dockState\nSetRibbonDockState - no automatic redraw after invoked\ndockState enums: {#TopDock|#BottomDock|#LeftDock|#RightDock|#Floating}"
							},
							{
								"name": "SetRibbonOrientation",
								"desc": "<void>SetRibbonOrientation <enum>orientation\nSetRibbonOrientation - no automatic redraw after invoked\norientation enums: {#Horizontal|#Vertical}"
							},
							{
								"name": "ShowRibbon",
								"desc": "<void>ShowRibbon <boolean>show\nShowRibbon - no automatic redraw after invoked"
							}
						]
					}
				},
				{
					"name": "memStreamMgr",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "openFile",
								"desc": "<Interface>openFile <filename>fname favor_type:<enum> code_page:<integer>\nfavor_type enums: {#FAVOR_ACP|#FAVOR_UTF8}\nfavor_type default value: #FAVOR_ACP\ncode_page default value: 0"
							},
							{
								"name": "openString",
								"desc": "<Interface>openString <string>string"
							}
						]
					}
				},
				{
					"name": "MeshInspector",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "Enable",
								"desc": "bool : Read|Write"
							},
							{
								"name": "RepairMesh",
								"desc": "bool : Read|Write"
							},
							{
								"name": "ShowDialog",
								"desc": "bool : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "msZip",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "fileInPackage",
								"desc": "<boolean>fileInPackage <filename>fileName <&TSTR>extractDir\nextractDir is Out parameter"
							}
						]
					}
				},
				{
					"name": "MtlBrowserFilter_Manager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "MultipleEdges",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "hasPropertyDlg()",
								"desc": "<bool>hasPropertyDlg()"
							},
							{
								"name": "Check",
								"desc": "<enum>Check <time>time <node>nodeToCheck <&index array>results\nCheck enums: {#Failed|#Vertices|#Edges|#Faces\nresults is In and Out parameter"
							}
						]
					}
				},
				{
					"name": "MXSDebugger",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "allowBreakOnThrow",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "allowUnsafeMethods",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "breakCyclePeriod",
								"desc": "DWORD : Read|Write"
							},
							{
								"name": "breakOnError",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "breakOnException",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "breakTimeoutPeriod",
								"desc": "DWORD : Read|Write"
							},
							{
								"name": "clearOutputOnOpen",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "commandTimeOutPeriod",
								"desc": "DWORD : Read|Write"
							},
							{
								"name": "defaultBreakOnThrow",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "enabledInNetRender",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "enabledInQuietMode",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "gcTimeoutPeriod",
								"desc": "DWORD : Read|Write"
							},
							{
								"name": "hWnd",
								"desc": "HWND : Read"
							},
							{
								"name": "ignoreCaughtErrors",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "ignoreCaughtExceptions",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "ignoreCaughtThrows",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "isDialogOpen",
								"desc": "boolean : Read"
							},
							{
								"name": "showFirstFrameOnly",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "showGlobalConstants",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "stayOnTop",
								"desc": "boolean : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "closeDialog()",
								"desc": "<void>closeDialog()"
							},
							{
								"name": "writeString",
								"desc": "<void>writeString <string>message"
							}
						]
					}
				},
				{
					"name": "NamedSelectionSetManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "AddNewNamedSelSet",
								"desc": "<boolean>AddNewNamedSelSet <&node array>nodeSet <&TSTR>setName\nAddNewNamedSelSet - no automatic redraw after invoked\nnodeSet is In parameter\nsetName is In parameter"
							},
							{
								"name": "GetNamedSelSetList",
								"desc": "<boolean>GetNamedSelSetList <&node array>nodeSet <integer>setIndex\nGetNamedSelSetList - no automatic redraw after invoked\nnodeSet is In and Out parameter"
							},
							{
								"name": "RemoveNamedSelSetByIndex",
								"desc": "<boolean>RemoveNamedSelSetByIndex <integer>setName\nRemoveNamedSelSetByIndex - no automatic redraw after invoked"
							},
							{
								"name": "RemoveNamedSelSetByName",
								"desc": "<boolean>RemoveNamedSelSetByName <&TSTR>setName\nRemoveNamedSelSetByName - no automatic redraw after invoked\nsetName is In parameter"
							},
							{
								"name": "ReplaceNamedSelSetByIndex",
								"desc": "<boolean>ReplaceNamedSelSetByIndex <&node array>nodeSet <integer>setIndex\nReplaceNamedSelSetByIndex - no automatic redraw after invoked\nnodeSet is In parameter"
							},
							{
								"name": "ReplaceNamedSelSetByName",
								"desc": "<boolean>ReplaceNamedSelSetByName <&node array>nodeSet <&TSTR>setName\nReplaceNamedSelSetByName - no automatic redraw after invoked\nnodeSet is In parameter\nsetName is In parameter"
							},
							{
								"name": "GetNamedSelSetItemCount",
								"desc": "<integer>GetNamedSelSetItemCount <integer>setIndex\nGetNamedSelSetItemCount - no automatic redraw after invoked"
							},
							{
								"name": "GetNamedSelSetItem",
								"desc": "<node>GetNamedSelSetItem <integer>setIndex <integer>itemIndex\nGetNamedSelSetItem - no automatic redraw after invoked"
							},
							{
								"name": "GetNamedSelSetName",
								"desc": "<string>GetNamedSelSetName <integer>setIndex\nGetNamedSelSetName - no automatic redraw after invoked"
							}
						]
					}
				},
				{
					"name": "NetCreateHelpers",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "NodeCloneMgrTest",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "NullInterface",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "NVIDIARenderersHelper",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "objXRefs",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "isFileDisabled",
								"desc": "<boolean>isFileDisabled <filename>fname"
							},
							{
								"name": "isFileUnresolved",
								"desc": "<boolean>isFileUnresolved <filename>fname"
							},
							{
								"name": "reloadFile",
								"desc": "<boolean>reloadFile <filename>fname"
							},
							{
								"name": "getFileName",
								"desc": "<filename>getFileName <index>index"
							},
							{
								"name": "getNumFiles()",
								"desc": "<integer>getNumFiles()"
							},
							{
								"name": "getNumXRefObjects",
								"desc": "<integer>getNumXRefObjects <filename>fname"
							},
							{
								"name": "getAllXRefObjects()",
								"desc": "<maxObject by value array>getAllXRefObjects()"
							},
							{
								"name": "addNewXRefObject",
								"desc": "<maxObject>addNewXRefObject <filename>fname <string>objname <integer>flags"
							},
							{
								"name": "getXRefObject",
								"desc": "<maxObject>getXRefObject <filename>fname <index>index"
							}
						]
					}
				},
				{
					"name": "OGSDiagnostics",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "HardwareReport",
								"desc": "string : Read"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "OverlappedUVWFaces",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "hasPropertyDlg()",
								"desc": "<bool>hasPropertyDlg()"
							},
							{
								"name": "Check",
								"desc": "<enum>Check <time>time <node>nodeToCheck <&index array>results\nCheck enums: {#Failed|#Vertices|#Edges|#Faces\nresults is In and Out parameter"
							}
						]
					}
				},
				{
					"name": "OverlappingFaces",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "tolerance",
								"desc": "float : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "hasPropertyDlg()",
								"desc": "<bool>hasPropertyDlg()"
							},
							{
								"name": "Check",
								"desc": "<enum>Check <time>time <node>nodeToCheck <&index array>results\nCheck enums: {#Failed|#Vertices|#Edges|#Faces\nresults is In and Out parameter"
							}
						]
					}
				},
				{
					"name": "PaintSoftSelPresetContext",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "paramWire",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "connect",
								"desc": "<bool>connect <value>fromParam <value>toParam <string>toExpr"
							},
							{
								"name": "connect2Way",
								"desc": "<bool>connect2Way <value>leftParam <value>rightParam <string>leftExpr <string>rightExpr"
							},
							{
								"name": "disconnect",
								"desc": "<bool>disconnect <control>controller"
							},
							{
								"name": "editController",
								"desc": "<void>editController <control>controller"
							},
							{
								"name": "editControllers",
								"desc": "<void>editControllers <control>leftController <control>rightController"
							},
							{
								"name": "editParam",
								"desc": "<void>editParam <value>param"
							},
							{
								"name": "editParams",
								"desc": "<void>editParams <value>leftParam <value>rightParam"
							},
							{
								"name": "openEditor()",
								"desc": "<void>openEditor()"
							},
							{
								"name": "start()",
								"desc": "<void>start()"
							}
						]
					}
				},
				{
					"name": "particleFlow",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "makeUnique",
								"desc": "<bool>makeUnique <node>action"
							},
							{
								"name": "cleanUpParticleFlow",
								"desc": "<integer>cleanUpParticleFlow <bool>doReport"
							},
							{
								"name": "getActionOrder()",
								"desc": "<integer>getActionOrder()"
							},
							{
								"name": "getUpdateType()",
								"desc": "<integer>getUpdateType()"
							},
							{
								"name": "setActionOrder",
								"desc": "<integer>setActionOrder <integer>orderType"
							},
							{
								"name": "setUpdateType",
								"desc": "<integer>setUpdateType <integer>updateType"
							},
							{
								"name": "synchronizeLayers",
								"desc": "<integer>synchronizeLayers <bool>doReport"
							},
							{
								"name": "openParticleView()",
								"desc": "<node>openParticleView()"
							},
							{
								"name": "scriptRunner()",
								"desc": "<node>scriptRunner()"
							},
							{
								"name": "beginEdit()",
								"desc": "<void>beginEdit()"
							},
							{
								"name": "delete",
								"desc": "<void>delete <node>particleFlowItem"
							},
							{
								"name": "endEdit()",
								"desc": "<void>endEdit()"
							},
							{
								"name": "presetManager()",
								"desc": "<void>presetManager()"
							},
							{
								"name": "repairCacheSystem",
								"desc": "<void>repairCacheSystem <bool>doReport"
							},
							{
								"name": "resetParticleView()",
								"desc": "<void>resetParticleView()"
							},
							{
								"name": "setNodeEditorDisplayFlags",
								"desc": "<void>setNodeEditorDisplayFlags <integer>displayFlags"
							}
						]
					}
				},
				{
					"name": "PerezAllWeather",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "PhysSunSky_ShaderGenerator",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "pluginManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "loadedPluginDllSize",
								"desc": "integer : Read"
							},
							{
								"name": "pluginDllCount",
								"desc": "integer : Read"
							},
							{
								"name": "visible",
								"desc": "boolean : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "pluginDllFullPath",
								"desc": "<TSTR by value>pluginDllFullPath <index>index\npluginDllFullPath - no automatic redraw after invoked"
							},
							{
								"name": "isPluginDllLoaded",
								"desc": "<boolean>isPluginDllLoaded <index>index\nisPluginDllLoaded - no automatic redraw after invoked"
							},
							{
								"name": "loadPluginDll",
								"desc": "<boolean>loadPluginDll <index>index\nloadPluginDll - no automatic redraw after invoked"
							},
							{
								"name": "pluginDllSize",
								"desc": "<integer>pluginDllSize <index>index\npluginDllSize - no automatic redraw after invoked"
							},
							{
								"name": "pluginDllDirectory",
								"desc": "<string>pluginDllDirectory <index>index\npluginDllDirectory - no automatic redraw after invoked"
							},
							{
								"name": "pluginDllName",
								"desc": "<string>pluginDllName <index>index\npluginDllName - no automatic redraw after invoked"
							}
						]
					}
				},
				{
					"name": "pop",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "DisplayType",
								"desc": "enum : Read|Write"
							},
							{
								"name": "NumFrames",
								"desc": "integer : Read|Write"
							},
							{
								"name": "RealWorldScale",
								"desc": "float : Read|Write"
							},
							{
								"name": "SeatFemalePct",
								"desc": "float : Read|Write"
							},
							{
								"name": "SeatMaxTalkAngle",
								"desc": "float : Read|Write"
							},
							{
								"name": "SeatMaxTalkDist",
								"desc": "float : Read|Write"
							},
							{
								"name": "TurnOpt",
								"desc": "enum : Read|Write"
							},
							{
								"name": "DisplayType",
								"desc": "DisplayType enums: {#StickFigure|#CrowdCustom|#CrowdSkin}"
							},
							{
								"name": "TurnOpt",
								"desc": "TurnOpt enums: {#hybrid|#maxspeed|#maxdistribution|#mindistance|#none}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "AddFlow",
								"desc": "<bool>AddFlow <node>Flow"
							},
							{
								"name": "AddIdleArea",
								"desc": "<bool>AddIdleArea <node>IdleArea"
							},
							{
								"name": "AddSeat",
								"desc": "<bool>AddSeat <node>Seat"
							},
							{
								"name": "RegenerateSelected",
								"desc": "<bool>RegenerateSelected <time>time"
							},
							{
								"name": "SwitchSelPeopleResolution()",
								"desc": "<bool>SwitchSelPeopleResolution()"
							},
							{
								"name": "NumPedestrians()",
								"desc": "<integer>NumPedestrians()"
							},
							{
								"name": "NumSeatedIdlers()",
								"desc": "<integer>NumSeatedIdlers()"
							},
							{
								"name": "NumStandingIdlers()",
								"desc": "<integer>NumStandingIdlers()"
							},
							{
								"name": "GetPedestrian",
								"desc": "<node>GetPedestrian <integer>index"
							},
							{
								"name": "GetSeatedIdler",
								"desc": "<node>GetSeatedIdler <integer>index"
							},
							{
								"name": "GetStandingIdler",
								"desc": "<node>GetStandingIdler <integer>index"
							},
							{
								"name": "BakeSelPeople()",
								"desc": "<void>BakeSelPeople()"
							},
							{
								"name": "DeletePeople()",
								"desc": "<void>DeletePeople()"
							},
							{
								"name": "DeleteSelPeople",
								"desc": "<void>DeleteSelPeople <time>time"
							},
							{
								"name": "DisplayEnv",
								"desc": "<void>DisplayEnv <boolean>show"
							},
							{
								"name": "DisplayMarks",
								"desc": "<void>DisplayMarks <boolean>show"
							},
							{
								"name": "DisplayPeople",
								"desc": "<void>DisplayPeople <boolean>show"
							},
							{
								"name": "ResimulateSelected()",
								"desc": "<void>ResimulateSelected()"
							},
							{
								"name": "SaveTextureMaps",
								"desc": "<void>SaveTextureMaps <boolean>save"
							},
							{
								"name": "SetSelectedSeatsGender()",
								"desc": "<void>SetSelectedSeatsGender()"
							},
							{
								"name": "Simulate()",
								"desc": "<void>Simulate()"
							},
							{
								"name": "SwapSelPeopleAppearance()",
								"desc": "<void>SwapSelPeopleAppearance()"
							}
						]
					}
				},
				{
					"name": "ProjectionRenderMgr",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "PseudoColorManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "rangeEnd",
								"desc": "float : Read|Write"
							},
							{
								"name": "rangeStart",
								"desc": "float : Read|Write"
							},
							{
								"name": "scaleType",
								"desc": "enum : Read|Write"
							},
							{
								"name": "scaleType",
								"desc": "scaleType enums: {#linear|#logarithmic}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "python",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "Execute",
								"desc": "<enum>Execute <string>script fileName:<filename> throwOnError:<bool> clearUndoBuffer:<bool>\nExecute enums: {#success|#pathError|#argumentError|#initError|#scriptFileError|#executeError\nfileName default value: undefined\nthrowOnError default value: true\nclearUndoBuffer default value: false"
							},
							{
								"name": "ExecuteFile",
								"desc": "<enum>ExecuteFile <filename>fileName throwOnError:<bool> clearUndoBuffer:<bool>\nExecuteFile enums: {#success|#pathError|#argumentError|#initError|#scriptFileError|#executeError\nthrowOnError default value: true\nclearUndoBuffer default value: false"
							},
							{
								"name": "Import",
								"desc": "<value>Import <string>moduleName throwOnError:<bool>\nthrowOnError default value: true"
							},
							{
								"name": "Reload",
								"desc": "<value>Reload <value>module throwOnError:<bool>\nthrowOnError default value: true"
							}
						]
					}
				},
				{
					"name": "radiosityMeshOps",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "isRadiosityValid()",
								"desc": "<boolean>isRadiosityValid()"
							},
							{
								"name": "getRadiosityMesh",
								"desc": "<mesh by value>getRadiosityMesh <node>radiosity_Node"
							}
						]
					}
				},
				{
					"name": "RadiosityPreferences",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "autoProcessObjectRefine",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "computeAdvancedLighting",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "computeRadiosity",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "displayInViewport",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "displayReflectanceInMEditor",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "displayResetWarning",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "saveScene",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "updateDataWhenRequiredOnStart",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "useAdvancedLighting",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "useRadiosity",
								"desc": "boolean : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "reactionMgr",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "refhierarchy",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "renderMessageManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "LogDebugMessage",
								"desc": "bool : Read|Write"
							},
							{
								"name": "LogFileAppend",
								"desc": "bool : Read|Write"
							},
							{
								"name": "LogFileON",
								"desc": "bool : Read|Write"
							},
							{
								"name": "LogFilename",
								"desc": "string : Read|Write"
							},
							{
								"name": "OpenOnError",
								"desc": "bool : Read|Write"
							},
							{
								"name": "ShowInfoMessage",
								"desc": "bool : Read|Write"
							},
							{
								"name": "ShowProgressMessage",
								"desc": "bool : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "OpenWindow()",
								"desc": "<bool>OpenWindow()"
							},
							{
								"name": "HideWindow()",
								"desc": "<void>HideWindow()"
							}
						]
					}
				},
				{
					"name": "renderpresets",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "LoadCategories",
								"desc": "<bitArray>LoadCategories <filename>file"
							},
							{
								"name": "IsFileCompatible",
								"desc": "<boolean>IsFileCompatible <integer>which <filename>file"
							},
							{
								"name": "Load",
								"desc": "<boolean>Load <integer>which <filename>file <bitArray>categories loadNodes:<enum>\nloadNodes enums: {#prompt|#yes|#no|#cancel}\nloadNodes default value: #prompt"
							},
							{
								"name": "LoadAll",
								"desc": "<boolean>LoadAll <integer>which <filename>file"
							},
							{
								"name": "Save",
								"desc": "<boolean>Save <integer>which <filename>file <bitArray>categories"
							},
							{
								"name": "SaveAll",
								"desc": "<boolean>SaveAll <integer>which <filename>file"
							},
							{
								"name": "MapCategoryToIndex",
								"desc": "<integer>MapCategoryToIndex <filename>file <string>category"
							},
							{
								"name": "MapSceneCategoryToIndex",
								"desc": "<integer>MapSceneCategoryToIndex <integer>which <string>category"
							},
							{
								"name": "MapIndexToCategory",
								"desc": "<string>MapIndexToCategory <filename>file <integer>index"
							},
							{
								"name": "MapSceneIndexToCategory",
								"desc": "<string>MapSceneIndexToCategory <integer>which <integer>index"
							}
						]
					}
				},
				{
					"name": "RevitDBManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "RevitImportWorkflow",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "rollup",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "SceneMissingPlugIns",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetMissingPlugInCount()",
								"desc": "<integer>GetMissingPlugInCount()"
							},
							{
								"name": "GetMissingPlugInClassName",
								"desc": "<string>GetMissingPlugInClassName <index>Index"
							},
							{
								"name": "GetMissingPlugInFileName",
								"desc": "<string>GetMissingPlugInFileName <index>Index"
							}
						]
					}
				},
				{
					"name": "SceneRadiosity",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "radiosity",
								"desc": "value : Read|Write|Validated by Validator function"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "closePanel()",
								"desc": "<void>closePanel()"
							},
							{
								"name": "showPanel()",
								"desc": "<void>showPanel()"
							}
						]
					}
				},
				{
					"name": "SkinUtils",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetBoneBindTM",
								"desc": "<matrix3 by value>GetBoneBindTM <node>skinNode <node>boneNode"
							},
							{
								"name": "GetBoneStretchTM",
								"desc": "<matrix3 by value>GetBoneStretchTM <node>skinNode <node>boneNode"
							},
							{
								"name": "GetMeshBindTM",
								"desc": "<matrix3 by value>GetMeshBindTM <node>skinNode"
							},
							{
								"name": "ExtractSkinData",
								"desc": "<void>ExtractSkinData <node>node"
							},
							{
								"name": "GrowSelection",
								"desc": "<void>GrowSelection <node>skinNode"
							},
							{
								"name": "ImportSkinData",
								"desc": "<void>ImportSkinData <node>targetNode <node>sourceNode"
							},
							{
								"name": "LoopSelection",
								"desc": "<void>LoopSelection <node>skinNode"
							},
							{
								"name": "RingSelection",
								"desc": "<void>RingSelection <node>skinNode"
							},
							{
								"name": "SetBoneBindTM",
								"desc": "<void>SetBoneBindTM <node>skinNode <node>boneNode <matrix3 by value>tm"
							},
							{
								"name": "SetBoneStretchTM",
								"desc": "<void>SetBoneStretchTM <node>skinNode <node>boneNode <matrix3 by value>tm"
							},
							{
								"name": "SetMeshBindTM",
								"desc": "<void>SetMeshBindTM <node>skinNode <matrix3 by value>tm"
							},
							{
								"name": "ShrinkSelection",
								"desc": "<void>ShrinkSelection <node>skinNode"
							}
						]
					}
				},
				{
					"name": "SME",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "activeView",
								"desc": "index : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetView",
								"desc": "<IObject>GetView <index>index"
							},
							{
								"name": "GetMainframe()",
								"desc": "<Interface>GetMainframe()"
							},
							{
								"name": "GetMaterialPool()",
								"desc": "<Interface>GetMaterialPool()"
							},
							{
								"name": "GetNavigator()",
								"desc": "<Interface>GetNavigator()"
							},
							{
								"name": "GetParamEditor()",
								"desc": "<Interface>GetParamEditor()"
							},
							{
								"name": "IsOpen()",
								"desc": "<bool>IsOpen()"
							},
							{
								"name": "CreateView",
								"desc": "<index>CreateView <string>name"
							},
							{
								"name": "GetViewByName",
								"desc": "<index>GetViewByName <string>name"
							},
							{
								"name": "GetViewIndex",
								"desc": "<index>GetViewIndex <IObject>view"
							},
							{
								"name": "GetNumViews()",
								"desc": "<integer>GetNumViews()"
							},
							{
								"name": "DoMtlBrowseDlg",
								"desc": "<maxObject>DoMtlBrowseDlg <HWND>parent <DWORD>flags <&boolean>newMat <&boolean>cancel fromLibrary:<*boolean> copiedMaterial:<*boolean>\nnewMat is In and Out parameter\ncancel is In and Out parameter\nfromLibrary default value: undefined\nfromLibrary is In and Out parameter\ncopiedMaterial default value: undefined\ncopiedMaterial is In and Out parameter"
							},
							{
								"name": "GetMtlInParamEditor()",
								"desc": "<maxObject>GetMtlInParamEditor()"
							},
							{
								"name": "Close()",
								"desc": "<void>Close()"
							},
							{
								"name": "DeleteView",
								"desc": "<void>DeleteView <index>index <bool>ask_user"
							},
							{
								"name": "Open()",
								"desc": "<void>Open()"
							},
							{
								"name": "SetMtlInParamEditor",
								"desc": "<void>SetMtlInParamEditor <maxObject>mtlbase"
							}
						]
					}
				},
				{
					"name": "SubstManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "timeSlider",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "setVisible",
								"desc": "<void>setVisible <boolean>visible"
							}
						]
					}
				},
				{
					"name": "TipSystem",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "tmGizmos",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "ShowMultipleTransformGizmos",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "arcRotateSnapAngle",
								"desc": "float : Read|Write"
							},
							{
								"name": "centerBoxType",
								"desc": "enum : Read|Write"
							},
							{
								"name": "dragX",
								"desc": "float : Read|Write"
							},
							{
								"name": "dragY",
								"desc": "float : Read|Write"
							},
							{
								"name": "freeRotate",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "intersectMode",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "moveGizmoRelativeSize",
								"desc": "float : Read|Write"
							},
							{
								"name": "movePlaneHandleOffset",
								"desc": "float : Read|Write"
							},
							{
								"name": "movePlaneHandleSize",
								"desc": "float : Read|Write"
							},
							{
								"name": "perpsectiveSensitivity",
								"desc": "float : Read|Write"
							},
							{
								"name": "planeOpacity",
								"desc": "float : Read|Write"
							},
							{
								"name": "rotateGizmoRelativeSize",
								"desc": "float : Read|Write"
							},
							{
								"name": "rotationIncrement",
								"desc": "float : Read|Write"
							},
							{
								"name": "rotationMode",
								"desc": "integer : Read|Write"
							},
							{
								"name": "rotationPlanarThreshold",
								"desc": "float : Read|Write"
							},
							{
								"name": "scaleGizmoRelativeSize",
								"desc": "float : Read|Write"
							},
							{
								"name": "scalePlaneHandleSize",
								"desc": "float : Read|Write"
							},
							{
								"name": "screenHandle",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "showAngleData",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "showMiniTripod",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "showPieSlice",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "size",
								"desc": "integer : Read|Write"
							},
							{
								"name": "sizeUnscaled",
								"desc": "integer : Read|Write"
							},
							{
								"name": "uniformPlaneScaling",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "uniformScaleHandleSize",
								"desc": "float : Read|Write"
							},
							{
								"name": "useCenterBox",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "useGizmo",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "useLabels",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "usePlanes",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "vecX",
								"desc": "float : Read|Write"
							},
							{
								"name": "vecY",
								"desc": "float : Read|Write"
							},
							{
								"name": "centerBoxType",
								"desc": "centerBoxType enums: {#screen|#activeGrid}"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "UtilityPanel",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "OpenUtility",
								"desc": "<integer>OpenUtility <class>ClassName"
							}
						]
					}
				},
				{
					"name": "ViewCubeOps",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "All3DViewportsDisplay",
								"desc": "bool : Read|Write"
							},
							{
								"name": "AngleOfNorth",
								"desc": "float : Read|Write"
							},
							{
								"name": "AnimatedTransition",
								"desc": "bool : Read|Write"
							},
							{
								"name": "DragSnapping",
								"desc": "bool : Read|Write"
							},
							{
								"name": "DrawCompass",
								"desc": "bool : Read|Write"
							},
							{
								"name": "FitToView",
								"desc": "bool : Read|Write"
							},
							{
								"name": "KeepSceneUp",
								"desc": "bool : Read|Write"
							},
							{
								"name": "MinOpacity",
								"desc": "float : Read|Write"
							},
							{
								"name": "Size",
								"desc": "integer : Read|Write"
							},
							{
								"name": "Visibility",
								"desc": "bool : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					}
				},
				{
					"name": "visualMS",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "createForm()",
								"desc": "<Interface>createForm()"
							}
						]
					}
				},
				{
					"name": "WorkingPivot",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "AxisSize",
								"desc": "float : Read|Write"
							},
							{
								"name": "EditMode",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "ShowCaddyEdit",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "ShowCaddyPlace",
								"desc": "boolean : Read|Write"
							},
							{
								"name": "UseMode",
								"desc": "boolean : Read|Write"
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "getPinWorkingPivot()",
								"desc": "<boolean>getPinWorkingPivot()"
							},
							{
								"name": "getPlacePivotAlignToView()",
								"desc": "<boolean>getPlacePivotAlignToView()"
							},
							{
								"name": "getPlacePivotSurfaceMode()",
								"desc": "<boolean>getPlacePivotSurfaceMode()"
							},
							{
								"name": "getPlacePivotViewMode()",
								"desc": "<boolean>getPlacePivotViewMode()"
							},
							{
								"name": "getTM()",
								"desc": "<matrix3 by value>getTM()"
							},
							{
								"name": "alignToView()",
								"desc": "<void>alignToView()"
							},
							{
								"name": "resetTMToNode",
								"desc": "<void>resetTMToNode <node>node"
							},
							{
								"name": "setPinWorkingPivot",
								"desc": "<void>setPinWorkingPivot <boolean>on"
							},
							{
								"name": "setPlacePivotSurfaceMode",
								"desc": "<void>setPlacePivotSurfaceMode <boolean>on <boolean>alignToView"
							},
							{
								"name": "setPlacePivotViewMode",
								"desc": "<void>setPlacePivotViewMode <boolean>on <boolean>alignToView"
							},
							{
								"name": "setTM",
								"desc": "<void>setTM <&matrix3>tm\ntm is In and Out parameter"
							}
						]
					}
				},
				{
					"name": "WorkspaceManager",
					"property": {
						"kind":CompletionItemKind.Property,
						"names": [
							{
								"name": "",
								"desc": ""
							}
						]
					},
					"method": {
						"kind":CompletionItemKind.Method,
						"names": [
							{
								"name": "GetWriteDirectory()",
								"desc": "<TSTR by value>GetWriteDirectory()"
							},
							{
								"name": "CreateNewWorkspace",
								"desc": "<bool>CreateNewWorkspace <string>identifier <string>friendlyName"
							},
							{
								"name": "DeleteWorkspace",
								"desc": "<bool>DeleteWorkspace <string>identifier"
							},
							{
								"name": "GetRunScript",
								"desc": "<bool>GetRunScript <string>identifier"
							},
							{
								"name": "IsSubsystemSaving",
								"desc": "<bool>IsSubsystemSaving <string>identifier <string>subSystemIdentifier"
							},
							{
								"name": "ResetToDefaults",
								"desc": "<bool>ResetToDefaults <string>identifier"
							},
							{
								"name": "SetCurrentWorkspaceByIdentifier",
								"desc": "<bool>SetCurrentWorkspaceByIdentifier <string>identifier"
							},
							{
								"name": "SetEntryScript",
								"desc": "<bool>SetEntryScript <string>identifier <filename>script"
							},
							{
								"name": "SetExitScript",
								"desc": "<bool>SetExitScript <string>identifier <filename>script"
							},
							{
								"name": "SetWorkspaceName",
								"desc": "<bool>SetWorkspaceName <index>index <string>name"
							},
							{
								"name": "SetWorkspaceNameWithIdentifier",
								"desc": "<bool>SetWorkspaceNameWithIdentifier <string>identifier <string>name"
							},
							{
								"name": "ToggleSubsystemSaving",
								"desc": "<bool>ToggleSubsystemSaving <string>identifier <string>subSystemIdentifier"
							},
							{
								"name": "GetEntryScript",
								"desc": "<filename>GetEntryScript <string>identifier"
							},
							{
								"name": "GetExitScript",
								"desc": "<filename>GetExitScript <string>identifier"
							},
							{
								"name": "GetAllSubsystemsCount()",
								"desc": "<integer>GetAllSubsystemsCount()"
							},
							{
								"name": "GetWorkspaceCount()",
								"desc": "<integer>GetWorkspaceCount()"
							},
							{
								"name": "GetCurrentWorkspaceIdentifier()",
								"desc": "<string>GetCurrentWorkspaceIdentifier()"
							},
							{
								"name": "GetSubsystemName",
								"desc": "<string>GetSubsystemName <index>index"
							},
							{
								"name": "GetWorkspaceIdentifier",
								"desc": "<string>GetWorkspaceIdentifier <index>index"
							},
							{
								"name": "GetWorkspaceName",
								"desc": "<string>GetWorkspaceName <index>index"
							},
							{
								"name": "GetWorkspaceNameWithIdentifier",
								"desc": "<string>GetWorkspaceNameWithIdentifier <string>identifier"
							},
							{
								"name": "ToggleRunScript",
								"desc": "<void>ToggleRunScript <string>identifier"
							}
						]
					}
				},
